package objects;

import backend.animation.PsychAnimationController;
import backend.NoteTypesConfig;

import shaders.RGBPalette;
import shaders.RGBPalette.RGBShaderReference;

import objects.StrumNote;

import flixel.math.FlxRect;
import objects.playfields.PlayField;
import states.editors.ChartingState;

typedef EventNote = {
	strumTime:Float,
	event:String,
	value1:String,
	value2:String
}

typedef NoteSplashData = {
	disabled:Bool,
	texture:String,
	useGlobalShader:Bool, //breaks r/g/b but makes it copy default colors for your custom note
	useRGBShader:Bool,
	antialiasing:Bool,
	r:FlxColor,
	g:FlxColor,
	b:FlxColor,
	a:Float
}

enum abstract SustainPart(Int) from Int to Int
{
	var TAP = -1; // Not a sustain
	var HEAD = 0; // TapNote at the start of a sustain
	var PART = 1;
	var END = 2;
}

/**
 * The note object used as a data structure to spawn and manage notes during gameplay.
 * 
 * If you want to make a custom note type, you should search for: "function set_noteType"
**/
class Note extends NoteObject
{
	// Start of Extra Keys

	public static var gfxLetter:Array<String> = [
		'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I',
		'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R'
	];

	//EK Data
	public static var ammo:Array<Int> = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18];
	public static var scales:Array<Float> = [0.9, 0.85, 0.8, 0.7, 0.66, 0.6, 0.55, 0.50, 0.46, 0.39, 0.36, 0.32, 0.31, 0.31, 0.3, 0.26, 0.26, 0.22]; 
	public static var lessX:Array<Int> = [0, 0, 0, 0, 0, 8, 7, 8, 8, 7, 6, 6, 8, 7, 6, 7, 6, 6];
	public static var separator:Array<Int> = [99, 99, 99, 1, 1, 1, 2, 3, 3, 3, 4, 5, 6, 6, 7, 6, 5];
	public static var xtra:Array<Int> = [150, 89, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
	public static var posRest:Array<Int> = [0, 0, 0, 0, 25, 32,46, 52, 60, 40, 45, 30, 30, 29,72, 37, 61, 16];
	public static var gridSizes:Array<Int> = [40, 40, 40, 40, 40, 40, 40, 40, 40, 35, 30, 25, 25, 20, 20, 20, 20, 15];
	public static var xPosButBetter:Array<Float> = [2, 2, 2, 2, 1.5, 1.1, 1.1, 1, 1, 2, 2, 2, 2, 1.2, 2, 2, 2, 2];
	public static var xPosButBetter2:Array<Float> = [1, 1, 1, 1, 1.1, 1.2, 1.3, 1.5, 1.7, 1, 1, 1, 1, 2.9, 1, 1, 1, 1];
	public static var xPosButBetterOff:Array<Float> = [100, 100, 100, 100, 130, 250, 300, 300, 300, 100, 100, 100, 100, 250, 100, 100, 100, 100];
	public static var offsets:Array<Dynamic> = [[20, 10], [10, 10], [10, 10], [10, 10], [10, 10], [10, 10], [10, 10], [10, 10], [10, 10], [10, 20], [10, 10], [10, 10], [10, 10], [10, 10], [10, 10],[10, 10],[10, 10], [20, 20]];
	public static var noteSplashScales:Array<Float> = [1.3, 1.2, 1.1, 1, 1, 0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3, 0.3, 0.3, 0.2, 0.18, 0.18, 0.15];
	public static var noteSplashOffsets:Map<Int, Array<Int>> = [0 => [20, 10], 9 => [10, 20]];

	public static var minMania:Int = 0;
	public static var maxMania:Int = 17;
	public static var defaultMania:Int = 3;
	public var downscrollNote:Bool = ClientPrefs.data.downScroll;
	public var baseAlpha:Float = 1;
	public var autoGenerated:Bool = false;
	public static var pixelNotesDivisionValue:Array<Int> = [4, 18];

	public static var minManiaUI_integer:Int = minMania + 1;
	public static var maxManiaUI_integer:Int = maxMania + 1;

	public static var xmlMax:Int = 17; // This specifies the max of the splashes can go

	public static var keysShit:Map<Int, Map<String, Dynamic>> = [
		0 => [
			"letters" => ["E"], 
			"anims" => ["UP"], 
			"strumAnims" => ["SPACE"], 
			"pixelAnimIndex" => [4],
			"colArray" => [2]
		],
		1 => [
				"letters" => ["A", "D"], 
				"anims" => ["LEFT", "RIGHT"], 
				"strumAnims" => ["LEFT", "RIGHT"], 
				"pixelAnimIndex" => [0, 3],
				"colArray" => [0, 3]
			],
		2 => [
				"letters" => ["A", "E", "D"], 
				"anims" => ["LEFT", "UP", "RIGHT"], 
				"strumAnims" => ["LEFT", "SPACE", "RIGHT"], 
				"pixelAnimIndex" => [0, 4, 3],
				"colArray" => [0, 2, 3]
			],
		3 => [
				"letters" => ["A", "B", "C", "D"], 
				"anims" => ["LEFT", "DOWN", "UP", "RIGHT"], 
				"strumAnims" => ["LEFT", "DOWN", "UP", "RIGHT"], 
				"pixelAnimIndex" => [0, 1, 2, 3],
				"colArray" => [0, 1, 2, 3]
			],

		4 => [
				"letters" => ["A", "B", "E", "C", "D"], 
				"anims" => ["LEFT", "DOWN", "UP", "UP", "RIGHT"],
				"strumAnims" => ["LEFT", "DOWN", "SPACE", "UP", "RIGHT"], 
				"pixelAnimIndex" => [0, 1, 4, 2, 3],
				"colArray" => [0, 1, 2, 2, 3]
			],
		5 => [
				"letters" => ["A", "C", "D", "F", "B", "I"], 
				"anims" => ["LEFT", "UP", "RIGHT", "LEFT", "DOWN", "RIGHT"],
				"strumAnims" => ["LEFT", "UP", "RIGHT", "LEFT", "DOWN", "RIGHT"], 
				"pixelAnimIndex" => [0, 2, 3, 5, 1, 8],
				"colArray" => [0, 2, 3, 0, 1, 3]
			],
		6 => [
				"letters" => ["A", "C", "D", "E", "F", "B", "I"], 
				"anims" => ["LEFT", "UP", "RIGHT", "UP", "LEFT", "DOWN", "RIGHT"],
				"strumAnims" => ["LEFT", "UP", "RIGHT", "SPACE", "LEFT", "DOWN", "RIGHT"], 
				"pixelAnimIndex" => [0, 2, 3, 4, 5, 1, 8],
				"colArray" => [0, 2, 3, 2, 0, 1, 3]
			],
		7 => [
				"letters" => ["A", "B", "C", "D", "F", "G", "H", "I"], 
				"anims" => ["LEFT", "DOWN", "UP", "RIGHT", "LEFT", "DOWN", "UP", "RIGHT"],
				"strumAnims" => ["LEFT", "DOWN", "UP", "RIGHT", "LEFT", "DOWN", "UP", "RIGHT"], 
				"pixelAnimIndex" => [0, 1, 2, 3, 5, 6, 7, 8],
				"colArray" => [0, 1, 2, 3, 0, 1, 2, 3]
			],
		8 => [
				"letters" => ["A", "B", "C", "D", "E", "F", "G", "H", "I"], 
				"anims" => ["LEFT", "DOWN", "UP", "RIGHT", "UP", "LEFT", "DOWN", "UP", "RIGHT"],
				"strumAnims" => ["LEFT", "DOWN", "UP", "RIGHT", "SPACE", "LEFT", "DOWN", "UP", "RIGHT"], 
				"pixelAnimIndex" => [0, 1, 2, 3, 4, 5, 6, 7, 8],
				"colArray" => [0, 1, 2, 3, 2, 0, 1, 2, 3]
			],
		9 => [
				"letters" => ["A", "B", "C", "D", "E", "N", "F", "G", "H", "I"], 
				"anims" => ["LEFT", "DOWN", "UP", "RIGHT", "UP", "UP", "LEFT", "DOWN", "UP", "RIGHT"],
				"strumAnims" => ["LEFT", "DOWN", "UP", "RIGHT", "SPACE", "CIRCLE", "LEFT", "DOWN", "UP", "RIGHT"], 
				"pixelAnimIndex" => [0, 1, 2, 3, 4, 13, 5, 6, 7, 8],
				"colArray" => [0, 1, 2, 3, 2, 2, 0, 1, 2, 3]
			],
		10 => [
				"letters" => ["A", "B", "C", "D", "J", "E", "M", "F", "G", "H", "I"], 
				"anims" => ["LEFT", "DOWN", "UP", "RIGHT", "LEFT", "UP", "RIGHT", "LEFT", "DOWN", "UP", "RIGHT"],
				"strumAnims" => ["LEFT", "DOWN", "UP", "RIGHT", "CIRCLE", "SPACE", "CIRCLE", "LEFT", "DOWN", "UP", "RIGHT"], 
				"pixelAnimIndex" => [0, 1, 2, 3, 9, 4, 12, 5, 6, 7, 8],
				"colArray" => [0, 1, 2, 3, 0, 2, 3, 0, 1, 2, 3]
			],
		11 => [
				"letters" => ["A", "B", "C", "D", "J", "K", "L", "M", "F", "G", "H", "I"], 
				"anims" => ["LEFT", "DOWN", "UP", "RIGHT", "LEFT", "DOWN", "UP", "RIGHT", "LEFT", "DOWN", "UP", "RIGHT"],
				"strumAnims" => ["LEFT", "DOWN", "UP", "RIGHT", "CIRCLE", "CIRCLE", "CIRCLE", "CIRCLE", "LEFT", "DOWN", "UP", "RIGHT"], 
				"pixelAnimIndex" => [0, 1, 2, 3, 9, 10, 11, 12, 5, 6, 7, 8],
				"colArray" => [0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3]
			],
		12 => [
				"letters" => ["A", "B", "C", "D", "J", "K", "N", "L", "M", "F", "G", "H", "I"], 
				"anims" => ["LEFT", "DOWN", "UP", "RIGHT", "LEFT", "DOWN", "UP", "UP", "RIGHT", "LEFT", "DOWN", "UP", "RIGHT"],
				"strumAnims" => ["LEFT", "DOWN", "UP", "RIGHT", "CIRCLE", "CIRCLE", "CIRCLE", "CIRCLE", "CIRCLE", "LEFT", "DOWN", "UP", "RIGHT"], 
				"pixelAnimIndex" => [0, 1, 2, 3, 9, 10, 13, 11, 12, 5, 6, 7, 8],
				"colArray" => [0, 1, 2, 3, 0, 1, 2, 2, 3, 0, 1, 2, 3]
			],
		13 => [
				"letters" => ["A", "B", "C", "D", "J", "K", "E", "N", "L", "M", "F", "G", "H", "I"], 
				"anims" => ["LEFT", "DOWN", "UP", "RIGHT", "LEFT", "DOWN", "UP", "UP", "UP", "RIGHT", "LEFT", "DOWN", "UP", "RIGHT"],
				"strumAnims" => ["LEFT", "DOWN", "UP", "RIGHT", "CIRCLE", "CIRCLE", "SPACE", "CIRCLE", "CIRCLE", "CIRCLE", "LEFT", "DOWN", "UP", "RIGHT"], 
				"pixelAnimIndex" => [0, 1, 2, 3, 9, 10, 4, 13, 11, 12, 5, 6, 7, 8],
				"colArray" => [0, 1, 2, 3, 0, 1, 2, 2, 2, 3, 0, 1, 2, 3]
			],
		14 => [
				"letters" => ["A", "B", "C", "D", "J", "K", "E", "N", "E", "L", "M", "F", "G", "H", "I"], 
				"anims" => ["LEFT", "DOWN", "UP", "RIGHT", "LEFT", "DOWN", "UP", "UP", "UP", "UP", "RIGHT", "LEFT", "DOWN", "UP", "RIGHT"],
				"strumAnims" => ["LEFT", "DOWN", "UP", "RIGHT", "CIRCLE", "CIRCLE", "SPACE", "CIRCLE", "SPACE", "CIRCLE", "CIRCLE", "LEFT", "DOWN", "UP", "RIGHT"], 
				"pixelAnimIndex" => [0, 1, 2, 3, 9, 10, 4, 13, 4, 11, 12, 5, 6, 7, 8],
				"colArray" => [0, 1, 2, 3, 0, 1, 2, 2, 2, 2, 3, 0, 1, 2, 3]
			],
		15 => [
				"letters" => ["A", "B", "C", "D", "J", "K", "L", "M", "O", "P", "Q", "R", "F", "G", "H", "I"], 
				"anims" => ["LEFT", "DOWN", "UP", "RIGHT", "LEFT", "DOWN", "UP", "RIGHT", "LEFT", "DOWN", "UP", "RIGHT", "LEFT", "DOWN", "UP", "RIGHT"],
				"strumAnims" => ["LEFT", "DOWN", "UP", "RIGHT", "CIRCLE", "CIRCLE", "CIRCLE", "CIRCLE", "CIRCLE", "CIRCLE", "CIRCLE", "CIRCLE", "LEFT", "DOWN", "UP", "RIGHT"], 
				"pixelAnimIndex" => [0, 1, 2, 3, 9, 10, 11, 12, 14, 15, 16, 17, 5, 6, 7, 8],
				"colArray" => [0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3]
			],
		16 => [
				"letters" => ["A", "B", "C", "D", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "F", "G", "H", "I"], 
				"anims" => ["LEFT", "DOWN", "UP", "RIGHT", "LEFT", "DOWN", "UP", "UP", "RIGHT", "LEFT", "DOWN", "UP", "RIGHT", "LEFT", "DOWN", "UP", "RIGHT"],
				"strumAnims" => ["LEFT", "DOWN", "UP", "RIGHT", "CIRCLE", "CIRCLE", "CIRCLE", "CIRCLE", "CIRCLE", "CIRCLE", "CIRCLE", "CIRCLE", "CIRCLE", "LEFT", "DOWN", "UP", "RIGHT"], 
				"pixelAnimIndex" => [0, 1, 2, 3, 9, 10, 11, 12, 13, 14, 15, 16, 17, 5, 6, 7, 8],
				"colArray" => [0, 1, 2, 3, 0, 1, 2, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3]
		],
		17 => [
				"letters" => ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I',
				'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R'], 
				"anims" => ["LEFT", "DOWN", "UP", "RIGHT", "UP", "LEFT", "DOWN", "UP", "RIGHT",
				"LEFT", "DOWN", "UP", "RIGHT", "UP", "LEFT", "DOWN", "UP", "RIGHT"],
				"strumAnims" => ["LEFT", "DOWN", "UP", "RIGHT", "SPACE", "LEFT", "DOWN", "UP", "RIGHT", 
				"LEFT", "DOWN", "UP", "RIGHT", "CIRCLE", "LEFT", "DOWN", "UP", "RIGHT"], 
				"pixelAnimIndex" => [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17],
				"colArray" => [0, 1, 2, 3, 2, 0, 1, 2, 3, 0, 1, 2, 3, 2, 0, 1, 2, 3]
		],
	];

	public static var pixelScales:Array<Float> = [
        1.2, //1k
        1.15, //2k
        1.1, //3k
        1, //4k
        0.9, //5k
        0.83, //6k
        0.8, //7k
        0.74, //8k
        0.7, //9k
        0.6, //10k
        0.55,//11k
        0.5, //12k
        0.48, //13k
        0.48, //14k
        0.42, //15k
        0.38, //16k
        0.38, //17k
        0.32 //18k
    ];

	// End of Extra Keys

	//This is needed for the hardcoded note types to appear on the Chart Editor,
	//It's also used for backwards compatibility with 0.1 - 0.3.2 charts.
	public static final defaultNoteTypes:Array<String> = [
		'', //Always leave this one empty pls
		'Alt Animation',
		'Hey!',
		'Hurt Note',
		'GF Sing',
		'No Animation'
	];
	public var strumTime:Float = 0;

	public var mustPress:Bool = false;
	public var canBeHit:Bool = false;
	public var tooLate:Bool = false;

	public var wasGoodHit:Bool = false;
	public var missed:Bool = false;

	public var ignoreNote:Bool = false;
	public var hitByOpponent:Bool = false;
	public var noteWasHit:Bool = false;
	public var prevNote:Note;
	public var nextNote:Note;

	public var spawned:Bool = false;

	public var tail:Array<Note> = []; // for sustains
	public var parent:Note;
	
	public var blockHit:Bool = false; // only works for player

	public var sustainLength:Float = 0;
	public var isSustainNote:Bool = false;
	public var noteType(default, set):String = null;

	public var eventName:String = '';
	public var eventLength:Int = 0;
	public var eventVal1:String = '';
	public var eventVal2:String = '';

	public var rgbShader:RGBShaderReference;
	public static var globalRgbShaders:Array<RGBPalette> = [];
	public var inEditor:Bool = false;

	public var animSuffix:String = '';
	public var gfNote:Bool = false;
	public var earlyHitMult:Float = 1;
	public var lateHitMult:Float = 1;
	public var lowPriority:Bool = false;

	public static var SUSTAIN_SIZE:Int = 44;
	public static var swagWidth:Float = 160 * 0.7;
	public static var swagWidthAlt:Float = 160; //For ModManager
	public static var colArray:Array<String> = ['purple', 'blue', 'green', 'red'];
	public static var colArrayAlt:Array<String> = ['purple', 'blue', 'green', 'red', 'white', 'yellow', 'violet', 'black', 'dark'];
	public static var defaultNoteSkin(default, never):String = 'noteskins/NOTE_assets';

	public var noteSplashData:NoteSplashData = {
		disabled: false,
		texture: null,
		antialiasing: !PlayState.isPixelStage,
		useGlobalShader: false,
		useRGBShader: (PlayState.SONG != null) ? !(PlayState.SONG.disableNoteRGB == true) : true,
		r: -1,
		g: -1,
		b: -1,
		a: ClientPrefs.data.splashAlpha
	};

	public var offsetAngle:Float = 0;
	public var multSpeed(default, set):Float = 1;
	public var beat:Float = 0;
	public var copyX:Bool = true;
	public var copyY:Bool = true;
	public var copyAlpha:Bool = true;
	public var alphaMod:Float = 1;
	public var alphaMod2:Float = 1; // TODO: unhardcode this shit lmao
	@:noCompletion private static function set_swagWidth(val:Float){
		halfWidth = val * 0.5;
		return val;
	}
	public static var halfWidth(default, null):Float = swagWidth * 0.5;

	public var hitHealth:Float = 0.02;
	public var missHealth:Float = 0.1;
	public var rating:String = 'unknown';
	public var ratingMod:Float = 0; //9 = unknown, 0.25 = shit, 0.5 = bad, 0.75 = good, 1 = sick
	public var ratingDisabled:Bool = false;

	public var texture(default, set):String = null;

	public var noAnimation:Bool = false;
	public var noMissAnimation:Bool = false;
	public var hitCausesMiss:Bool = false;
	public var distance:Float = 2000; //plan on doing scroll directions soon -bb

	//Archipelago
	//TODO: Make this it's own object to help de-clutter Note
	//Maybe even make note like BaseNote or something to make hardcoded sub-notetypes or something
	public var isCheck:Bool = false;
	public var isMine:Bool = false;
	public var isAlert:Bool = false;
	public var isHeal:Bool = false;
	public var isFreeze:Bool = false;
	public var isFakeHeal:Bool = false;
	var justMixedUp:Bool = false;
	public var trueNoteData:Int = 0;
	public var specialNote:Bool = false;
	public var ignoreMiss:Bool = false;
	public var spinAmount:Float = 0;
	public var rootNote:Note;
	var posTween:FlxTween;

	//Action Engine Stuff
	public var noteIndex:Int = -1;

	//Mixtape Stuff
	// editor stuff for hit sounds
	public var editorHitBeat:Float = 0;
	public var holdType:SustainPart = TAP;
	public var parentNote:Note; 
	public var childrenNotes:Array<Note> = [];
	public var mania:Int = 3;
	var ogW:Float;
	var ogH:Float;
	public static var defaultWidth:Float = 0;
	public static var defaultHeight:Float = 0;
	public static var spriteScale:Float = 0.7;
	public var exNote:Bool = false;
	public var ghostNote:Bool = false;
	public var changeAnim:Bool = true;
	public var changeColSwap:Bool = true;
	public var isParent:Bool; // ke input shits
	public var childs:Array<Note> = [];
	public var spotInLine:Int = 0;
	public var susActive:Bool = true;
	public var customHealthHit:Bool = false;
	public var centerNote:Bool = false;
	public var hitboxMultiplier:Float = 1;
	public var cod:String = '???';
	public var scrollSpeed(default, set):Float = 0;
	public var garbage:Bool = false; // if this is true, the note will be removed in the next update cycle
	public var holdingTime:Float = 0;
	public var causedMiss:Bool = false;
	public var unhitTail:Array<Note> = [];
	public var tripProgress:Float = 1;
	public var isHeld:Bool = false;
	/** The maximum amount of time you can release a hold before it counts as a miss**/
	public var maxReleaseTime:Float = 1.25;
	public var typeOffsetX:Float = 0; // used to offset notes, mainly for note types. use in place of offset.x and offset.y when offsetting notetypes
	public var typeOffsetY:Float = 0;
	public var requiresTap:Bool = true; 
	public var isRoll:Bool = false;
	public var holdGlow:Bool = true; // Whether holds should "glow" / increase in alpha when held
	public var visualTime:Float = 0;
	public var fieldIndex:Int = -1; // Used to denote which PlayField to be placed into
									// Leave -1 if it should be automatically determined based on mustPress and placed into either bf or dad's based on that.
									// Note that holds automatically have this set to their parent's fieldIndex
	public var field:PlayField; // same as fieldIndex but lets you set the field directly incase you wanna do that i  guess
	private function set_scrollSpeed(value:Float):Float {
		scrollSpeed = value;
		return value;
	}

	public var copyVerts:Bool = true;
	public var typeOffsetAngle:Float = 0;
	#if PE_MOD_COMPATIBILITY
	@:isVar
	public var multAlpha(get, set):Float;
	function get_multAlpha()return alphaMod;
	function set_multAlpha(v:Float)return alphaMod = v;
	
	// Angle is controlled by verts in the modchart system

	@:isVar public var copyAngle(get, set):Bool;
	function get_copyAngle()return copyVerts;
	function set_copyAngle(val:Bool)return copyVerts = val;
	#end

	//AI Stuff
	public var AIStrumTime:Float = 0;
	public var AIMiss:Bool = false;

	public var hitsoundDisabled:Bool = false;
	public var hitsoundChartEditor:Bool = true;
	/**
	 * Forces the hitsound to be played even if the user's hitsound volume is set to 0
	**/
	public var hitsoundForce:Bool = false;
	public var hitsoundVolume(get, default):Float = 1.0;
	function get_hitsoundVolume():Float {
		if(ClientPrefs.data.hitsoundVolume > 0)
			return ClientPrefs.data.hitsoundVolume;
		return hitsoundForce ? hitsoundVolume : 0.0;
	}
	public var hitsound:String = 'hitsound';

	private function set_multSpeed(value:Float):Float {
		resizeByRatio(value / multSpeed);
		multSpeed = value;
		//trace('fuck cock');
		return value;
	}

	public function resizeByRatio(ratio:Float) //haha funny twitter shit
	{
		if(isSustainNote && animation.curAnim != null && !animation.curAnim.name.endsWith('tail'))
		{
			scale.y *= ratio;
			updateHitbox();
		}
	}

	private function set_texture(value:String):String {
		if(texture != value) reloadNote(value);

		texture = value;
		return value;
	}

	public function defaultRGB()
	{
		var arr:Array<FlxColor> = ClientPrefs.data.arrowRGBExtra[noteData];
		if(PlayState.isPixelStage) arr = ClientPrefs.data.arrowRGBPixelExtra[noteData];

		if (arr != null && noteData > -1 && noteData <= arr.length)
		{
			rgbShader.r = arr[0];
			rgbShader.g = arr[1];
			rgbShader.b = arr[2];
		}
		else
		{
			rgbShader.r = 0xFFFF0000;
			rgbShader.g = 0xFF00FF00;
			rgbShader.b = 0xFF0000FF;
		}
	}

	private function set_noteType(value:String):String {
		noteSplashData.texture = PlayState.SONG != null ? PlayState.SONG.splashSkin : 'noteSplashes/noteSplashes';
		defaultRGB();

		if(noteData > -1 && noteType != value) {
			switch(value) {
				case 'Hurt Note':
					ignoreNote = mustPress;
					
					// note colors
					rgbShader.r = 0xFF101010;
					rgbShader.g = 0xFFFF0000;
					rgbShader.b = 0xFF990022;

					// splash data and colors
					noteSplashData.r = 0xFFFF0000;
					noteSplashData.g = 0xFF101010;
					noteSplashData.texture = 'noteSplashes/noteSplashes-electric';

					// gameplay data
					lowPriority = true;
					missHealth = isSustainNote ? 0.25 : 0.1;
					hitCausesMiss = true;
					hitsound = 'cancelMenu';
					hitsoundChartEditor = false;
				case 'Alt Animation':
					animSuffix = '-alt';
				case 'No Animation':
					noAnimation = true;
					noMissAnimation = true;
				case 'GF Sing':
					gfNote = true;
			}
			if (value != null && value.length > 1) NoteTypesConfig.applyNoteTypeData(this, value);
			if (hitsound != 'hitsound' && hitsoundVolume > 0) Paths.sound(hitsound); //precache new sound for being idiot-proof
			noteType = value;
		}
		return value;
	}

	override function toString()
	{
		return '(column: $column | noteType: $noteType | strumTime: $strumTime | visible: $visible)';
	}

	public function new(strumTime:Float, noteData:Int, ?prevNote:Note, ?sustainNote:Bool = false, ?inEditor:Bool = false, ?createdFrom:Dynamic = null)
	{
		super();

		animation = new PsychAnimationController(this);

		antialiasing = ClientPrefs.data.antialiasing;
		if(createdFrom == null) createdFrom = PlayState.instance;

		if (prevNote == null)
			prevNote = this;

		this.objType = NOTE;
		column = noteData;

		this.prevNote = prevNote;
		isSustainNote = sustainNote;
		this.inEditor = inEditor;
		this.moves = false;
		mania = PlayState.mania;
		this.beat = Conductor.getBeat(strumTime);

		if (isSustainNote && prevNote != null) {
			parentNote = prevNote;
			while (parentNote.parentNote != null)
				parentNote = parentNote.parentNote;
			parentNote.childrenNotes.push(this);
		} else if (!isSustainNote)
			parentNote = null;

		baseAlpha = 1;

		x += (ClientPrefs.data.middleScroll ? PlayState.STRUM_X_MIDDLESCROLL : PlayState.STRUM_X) + 50;
		// MAKE SURE ITS DEFINITELY OFF SCREEN?
		if (!isSustainNote) y -= 2000;
		this.strumTime = strumTime;
		if(!inEditor) {
			this.strumTime += ClientPrefs.data.noteOffset;
			visualTime = PlayState.instance.getNoteInitialTime(this.strumTime);
		}

		this.noteData = noteData;

		if(noteData > -1)
		{
			rgbShader = new RGBShaderReference(this, initializeGlobalRGBShader(noteData));
			if(PlayState.SONG != null && PlayState.SONG.disableNoteRGB) rgbShader.enabled = false;
			texture = '';

			x += swagWidth * (noteData % Note.ammo[mania]);
			if(!isSustainNote && noteData > -1 && noteData < Note.maxManiaUI_integer) { //Doing this 'if' check to fix the warnings on Senpai songs
				var animToPlay:String = '';
				animToPlay = Note.keysShit.get(mania).get('letters')[noteData];
				if (hasAnimation(animToPlay))
					animation.play(animToPlay);
				else
				{
					animToPlay = colArray[Note.keysShit.get(mania).get('colArray')[noteData]];
					animation.play(animToPlay + 'Scroll');
				}
			}
		}

		// trace(prevNote);

		if(prevNote != null)
			prevNote.nextNote = this;

		if (isSustainNote && prevNote != null)
		{
			alpha = 0.6;
			multAlpha = 0.6;
			hitsoundDisabled = true;
			if(ClientPrefs.data.downScroll) flipY = true;

			//offsetY += height / 2;
			copyAngle = false;

			var animToPlay:String = '';
			animToPlay = Note.keysShit.get(mania).get('letters')[noteData] + ' tail';
			if (!hasAnimation(animToPlay))
			{
				animToPlay = colArray[Note.keysShit.get(mania).get('colArray')[noteData]] + 'holdend';
			}
			animation.play(animToPlay);

			updateHitbox();

			//offsetY += height / 2;

			//if (PlayState.isPixelStage)
				//offsetX += 30;

			if (prevNote.isSustainNote)
			{
				var animToPlay2:String = '';
				animToPlay2 = Note.keysShit.get(mania).get('letters')[noteData] + ' hold';
				if (!hasAnimation(animToPlay2))
				{
					animToPlay2 = colArray[Note.keysShit.get(mania).get('colArray')[noteData]] + 'hold';
				}
				prevNote.animation.play(animToPlay2);

				prevNote.scale.y *= Conductor.stepCrochet / 100 * 1.05;
				if(createdFrom != null && createdFrom.songSpeed != null) prevNote.scale.y *= createdFrom.songSpeed;

				if(PlayState.isPixelStage) {
					prevNote.scale.y *= 1.19;
					prevNote.scale.y *= (6 / height); //Auto adjust note size
				}
				prevNote.updateHitbox();

				// offsetY += height / 2;
				// prevNote.setGraphicSize();
			}

			if(PlayState.isPixelStage)
			{
				scale.y *= PlayState.daPixelZoom;
				updateHitbox();
			}
			earlyHitMult = 0;
		}
		else if(!isSustainNote)
		{
			centerOffsets();
			centerOrigin();
		}
		//x += offsetX;
	}

	public function hasAnimation(anim:String):Bool
	{
		return animation.exists(anim);
	}

	public static function initializeGlobalRGBShader(noteData:Int)
	{
		if(globalRgbShaders[noteData] == null)
		{
			var newRGB:RGBPalette = new RGBPalette();
			var arr:Array<FlxColor> = (!PlayState.isPixelStage) ? ClientPrefs.data.arrowRGBExtra[noteData] : ClientPrefs.data.arrowRGBPixelExtra[noteData];
			
			if (arr != null && noteData > -1 && noteData <= arr.length)
			{
				newRGB.r = arr[0];
				newRGB.g = arr[1];
				newRGB.b = arr[2];
			}
			else
			{
				newRGB.r = 0xFFFF0000;
				newRGB.g = 0xFF00FF00;
				newRGB.b = 0xFF0000FF;
			}
			
			globalRgbShaders[noteData] = newRGB;
		}
		return globalRgbShaders[noteData];
	}

	var _lastNoteOffX:Float = 0;
	static var _lastValidChecked:String; //optimization
	public var originalHeight:Float = 6;
	public var correctionOffset:Float = 0; //dont mess with this
	public function reloadNote(texture:String = '', postfix:String = '') {
		if(texture == null) texture = '';
		if(postfix == null) postfix = '';

		var skin:String = texture + postfix;
		if(texture.length < 1)
		{
			skin = PlayState.SONG != null ? PlayState.SONG.arrowSkin : null;
			if (skin == null || skin.length < 1)
				skin = "noteskins/NOTE_assets" + postfix;
		}
		else rgbShader.enabled = false;

		var animName:String = null;
		if(animation.curAnim != null) {
			animName = animation.curAnim.name;
		}

		var skinPixel:String = skin;
		var lastScaleY:Float = scale.y;
		var skinPostfix:String = getNoteSkinPostfix();
		var customSkin:String = skin + skinPostfix;
		var path:String = PlayState.isPixelStage ? 'pixelUI/' : '';
		if(skinPostfix != '' && (customSkin == _lastValidChecked || Paths.fileExists('images/' + path + customSkin + '.png', IMAGE)))
		{
			skin = customSkin;
			_lastValidChecked = customSkin;
		}
		else skinPostfix = '';

		defaultWidth = 157;
		defaultHeight = 154;

		if(PlayState.isPixelStage) {
			switch (noteType)
			{
				case 'Mine Note':
					loadGraphic(Paths.image("streamervschat/pixelUI/minenote"), false);
				case 'Warning Note':
					loadGraphic(Paths.image("streamervschat/pixelUI/warningnote"), false);
				case 'Heal Note':
					loadGraphic(Paths.image("streamervschat/pixelUI/healnote"), false);
				case 'Ice Note':
					loadGraphic(Paths.image("streamervschat/pixelUI/icenote"), false);
				case 'Fake Heal Note':
					loadGraphic(Paths.image("streamervschat/pixelUI/fakehealnote"), false);
				default:
					if(isSustainNote) {
						var graphic = Paths.image('pixelUI/' + skinPixel + 'ENDS' + skinPostfix);
						loadGraphic(graphic, true, Math.floor(graphic.width / Note.pixelNotesDivisionValue[0]), Math.floor(graphic.height / 2));
						originalHeight = graphic.height / 2;
					} else {
						var graphic = Paths.image('pixelUI/' + skinPixel + skinPostfix);
						loadGraphic(graphic, true, Math.floor(graphic.width / Note.pixelNotesDivisionValue[0]), Math.floor(graphic.height / 5));
					}
					setGraphicSize(Std.int(width * PlayState.daPixelZoom * Note.pixelScales[PlayState.mania]));
					loadPixelNoteAnims();
					antialiasing = false;
			}
		} else {
			switch (noteType)
			{
				case 'Mine Note':
					loadGraphic(Paths.image("streamervschat/minenote"), false);
				case 'Warning Note':
					loadGraphic(Paths.image("streamervschat/warningnote"), false);
				case 'Heal Note':
					loadGraphic(Paths.image("streamervschat/healnote"), false);
				case 'Ice Note':
					loadGraphic(Paths.image("streamervschat/icenote"), false);
				case 'Fake Heal Note':
					loadGraphic(Paths.image("streamervschat/fakehealnote"), false);
				default:
					frames = Paths.getSparrowAtlas(skin);
					loadNoteAnims();
					if (!isSustainNote) {
						centerOffsets();
						centerOrigin();
					}
			}
		}

		if(isSustainNote) {
			scale.y = lastScaleY;
		}
		if (inEditor)
			setGraphicSize(ChartingState.GRID_SIZE, ChartingState.GRID_SIZE);
		
		defScale.copyFrom(scale);
		updateHitbox();

		if(animName != null)
			animation.play(animName, true);
	}

	public static function getNoteSkinPostfix()
	{
		var skin:String = '';
		if(ClientPrefs.data.noteSkin != ClientPrefs.defaultData.noteSkin)
			skin = '-' + ClientPrefs.data.noteSkin.trim().toLowerCase().replace(' ', '_');
		return skin;
	}

	function loadNoteAnims() {
		attemptToAddAnimationByPrefix(gfxLetter[column], colArray[Note.keysShit.get(mania).get('colArray')[column]] + '0');
		attemptToAddAnimationByPrefix(gfxLetter[column], colArray[Note.keysShit.get(mania).get('colArray')[column]] + '0');
		attemptToAddAnimationByPrefix(gfxLetter[column], gfxLetter[column] + '0');

		if (isSustainNote)
		{
			attemptToAddAnimationByPrefix(gfxLetter[column] + ' hold', gfxLetter[column] + ' hold');
			attemptToAddAnimationByPrefix(gfxLetter[column] + ' tail', gfxLetter[column] + ' tail');
			
			attemptToAddAnimationByPrefix(gfxLetter[column] + ' tail', 'pruple end hold');
			attemptToAddAnimationByPrefix(gfxLetter[column] + ' tail', colArray[Note.keysShit.get(mania).get('colArray')[column]] + ' hold end');
			attemptToAddAnimationByPrefix(gfxLetter[column] + ' hold', colArray[Note.keysShit.get(mania).get('colArray')[column]] + ' hold piece');
		}
		
		if (isSustainNote)
			setGraphicSize(Std.int(defaultWidth * scales[mania]), Std.int(defaultHeight * scales[mania] * 5));
		else
			setGraphicSize(Std.int(defaultWidth * scales[mania]));
		updateHitbox();
	}

	function loadPixelNoteAnims() {
		for (i in 0...gfxLetter.length)
		{
			animation.add(gfxLetter[i], [i + pixelNotesDivisionValue[0]]);
			if (isSustainNote)
			{
				animation.add(gfxLetter[i] + ' hold', [i]);
				animation.add(gfxLetter[i] + ' tail', [i + pixelNotesDivisionValue[0]]);
			}
		}
	}

	function attemptToAddAnimationByPrefix(name:String, prefix:String, framerate:Float = 24, doLoop:Bool = true)
	{
		try {
			var animFrames = [];
			@:privateAccess
			animation.findByPrefix(animFrames, prefix); // adds valid frames to animFrames
			if(animFrames.length < 1) return;
	
			animation.addByPrefix(name, prefix, framerate, doLoop);
		}
		catch(e){
			trace("Anim was null!: " + prefix);
		}
	}

	override function draw()
	{		
		if (tooLate && !inEditor)
		{
			if (alpha > 0.3)
				alpha = 0.3;
		}

		super.draw();
	}

	override function update(elapsed:Float)
	{
		super.update(elapsed);

		mania = PlayState.mania;

		if (hitByOpponent)
				wasGoodHit = true;
			var diff = (strumTime - Conductor.songPosition);
			if (diff < -Conductor.safeZoneOffset && !wasGoodHit)
				tooLate = true;
		
		if (hitByOpponent)
			wasGoodHit = true;

		if (tooLate && !inEditor)
		{
			if (alpha > 0.3)
				alpha = 0.3;
		}
	}

	override public function destroy()
	{
		super.destroy();
		_lastValidChecked = '';
	}

	public function followStrumNote(myStrum:StrumNote, fakeCrochet:Float, songSpeed:Float = 1)
	{
		var strumX:Float = myStrum.x;
		var strumY:Float = myStrum.y;
		var strumAngle:Float = myStrum.angle;
		var strumAlpha:Float = myStrum.alpha;
		var strumDirection:Float = myStrum.direction;

		distance = (0.45 * (Conductor.songPosition - strumTime) * songSpeed * multSpeed);
		if (!myStrum.downScroll) distance *= -1;

		var angleDir = strumDirection * Math.PI / 180;
		if (copyAngle)
			angle = strumDirection - 90 + strumAngle + offsetAngle;

		if(copyAlpha)
			alpha = strumAlpha * multAlpha;

		if(copyX)
			x = strumX + offsetX + Math.cos(angleDir) * distance;

		if(copyY)
		{
			y = strumY + offsetY + correctionOffset + Math.sin(angleDir) * distance;
			if(myStrum.downScroll && isSustainNote)
			{
				if(PlayState.isPixelStage)
				{
					y -= PlayState.daPixelZoom * 9.5;
				}
				y -= (frameHeight * scale.y) - (Note.swagWidth / 2);
			}
		}
	}

	public function clipToStrumNote(myStrum:StrumNote)
	{
		var center:Float = myStrum.y + offsetY + Note.swagWidth / 2;
		if((mustPress || !ignoreNote) && (wasGoodHit || (prevNote.wasGoodHit && !canBeHit)))
		{
			var swagRect:FlxRect = clipRect;
			if(swagRect == null) swagRect = new FlxRect(0, 0, frameWidth, frameHeight);

			if (myStrum.downScroll)
			{
				if(y - offset.y * scale.y + height >= center)
				{
					swagRect.width = frameWidth;
					swagRect.height = (center - y) / scale.y;
					swagRect.y = frameHeight - swagRect.height;
				}
			}
			else if (y + offset.y * scale.y <= center)
			{
				swagRect.y = (center - y) / scale.y;
				swagRect.width = width / scale.x;
				swagRect.height = (height / scale.y) - swagRect.y;
			}
			clipRect = swagRect;
		}
	}

	@:noCompletion
	override function set_clipRect(rect:FlxRect):FlxRect
	{
		clipRect = rect;

		if (frames != null)
			frame = frames.frames[animation.frameIndex];

		return rect;
	}
}
