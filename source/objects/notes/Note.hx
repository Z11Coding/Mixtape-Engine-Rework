package objects.notes;

import backend.NoteTypesConfig;
import flixel.util.FlxColor;

import shaders.RGBPalette;
import shaders.RGBPalette.RGBShaderReference;

import objects.notes.SustainSplash;
import objects.playfields.PlayField;
import states.PlayState;
import backend.math.Vector3;
import objects.notes.NoteObject;
import backend.PsychAnimationController;

typedef EventNote = {
	strumTime:Float,
	event:String,
	value1:String,
	value2:String
}

typedef PreloadedChartNote = {
	strumTime:Float,
	noteData:Int,
	mustPress:Bool,
	oppNote:Bool,
	noteType:String,
	animSuffix:String,
	noteskin:String,
	texture:String,
	noAnimation:Bool,
	noMissAnimation:Bool,
	gfNote:Bool,
	isSustainNote:Bool,
	isSustainEnd:Bool,
	sustainLength:Float,
	parentST:Float,
	parentSL:Float,
	hitHealth:Float,
	missHealth:Float,
	hitCausesMiss:Null<Bool>,
	wasHit:Bool,
	multSpeed:Float,
	noteDensity:Float,
	ignoreNote:Bool,
	blockHit:Bool,
	lowPriority:Bool,
	AIMiss:Bool,
	AIstrumTime:Float,
	field:PlayField,
	fieldIndex:Int,
	noteIndex:Int,
	visualTime:Float
}

typedef NoteSplashData = {
	disabled:Bool,
	texture:String,
	useGlobalShader:Bool, //breaks r/g/b/a but makes it copy default colors for your custom note
	useRGBShader:Bool,
	antialiasing:Bool,
	r:FlxColor,
	g:FlxColor,
	b:FlxColor,
	a:Float
}

/**
 * The note object used as a data structure to spawn and manage notes during gameplay.
 * 
 * If you want to make a custom note type, you should search for: "function set_noteType"
**/

class Note extends NoteObject
{

	public var vec3Cache:Vector3 = new Vector3(); // for vector3 operations in modchart code
	public var mAngle:Float = 0;
	public var bAngle:Float = 0;

	public static var gfxLetter:Array<String> = [
		'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I',
		'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R'
	];

	//EK Data
	public static var ammo:Array<Int> = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18];
	public static var scales:Array<Float> = [0.9, 0.85, 0.8, 0.7, 0.66, 0.6, 0.55, 0.50, 0.46, 0.39, 0.36, 0.32, 0.31, 0.31, 0.3, 0.26, 0.26, 0.22]; 
	public static var lessX:Array<Int> = [0, 0, 0, 0, 0, 8, 7, 8, 8, 7, 6, 6, 8, 7, 6, 7, 6, 6];
	public static var separator:Array<Int> = [99, 99, 99, 1, 1, 1, 2, 3, 3, 3, 4, 5, 6, 6, 7, 6, 5];
	public static var xtra:Array<Int> = [150, 89, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
	public static var posRest:Array<Int> = [0, 0, 0, 0, 25, 32,46, 52, 60, 40, 45, 30, 30, 29,72, 37, 61, 16];
	public static var gridSizes:Array<Int> = [40, 40, 40, 40, 40, 40, 40, 40, 40, 35, 30, 25, 25, 20, 20, 20, 20, 15];
	public static var xPosButBetter:Array<Float> = [2, 2, 2, 2, 1.5, 1.1, 1.1, 1, 1, 2, 2, 2, 2, 1.2, 2, 2, 2, 2];
	public static var xPosButBetter2:Array<Float> = [1, 1, 1, 1, 1.1, 1.2, 1.3, 1.5, 1.7, 1, 1, 1, 1, 2.9, 1, 1, 1, 1];
	public static var xPosButBetterOff:Array<Float> = [100, 100, 100, 100, 130, 250, 300, 300, 300, 100, 100, 100, 100, 250, 100, 100, 100, 100];
	public static var offsets:Array<Dynamic> = [[20, 10], [10, 10], [10, 10], [10, 10], [10, 10], [10, 10], [10, 10], [10, 10], [10, 10], [10, 20], [10, 10], [10, 10], [10, 10], [10, 10], [10, 10],[10, 10],[10, 10], [20, 20]];
	public static var noteSplashScales:Array<Float> = [1.3, 1.2, 1.1, 1, 1, 0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3, 0.3, 0.3, 0.2, 0.18, 0.18, 0.15];
	public static var noteSplashOffsets:Map<Int, Array<Int>> = [0 => [20, 10], 9 => [10, 20]];

	public static var minMania:Int = 0;
	public static var maxMania:Int = 17;
	public static var defaultMania:Int = 3;
	public var downscrollNote:Bool = ClientPrefs.data.downScroll;
	public var baseAlpha:Float = 1;
	public var autoGenerated:Bool = false;
	public static var pixelNotesDivisionValue:Int = 18;

	public static var minManiaUI_integer:Int = minMania + 1;
	public static var maxManiaUI_integer:Int = maxMania + 1;

	public static var xmlMax:Int = 17; // This specifies the max of the splashes can go

	public static var keysShit:Map<Int, Map<String, Dynamic>> = [
		0 => [
			"letters" => ["E"], 
			"anims" => ["UP"], 
			"strumAnims" => ["SPACE"], 
			"pixelAnimIndex" => [4],
			"colArray" => [2]
		],
		1 => [
				"letters" => ["A", "D"], 
				"anims" => ["LEFT", "RIGHT"], 
				"strumAnims" => ["LEFT", "RIGHT"], 
				"pixelAnimIndex" => [0, 3],
				"colArray" => [0, 3]
			],
		2 => [
				"letters" => ["A", "E", "D"], 
				"anims" => ["LEFT", "UP", "RIGHT"], 
				"strumAnims" => ["LEFT", "SPACE", "RIGHT"], 
				"pixelAnimIndex" => [0, 4, 3],
				"colArray" => [0, 2, 3]
			],
		3 => [
				"letters" => ["A", "B", "C", "D"], 
				"anims" => ["LEFT", "DOWN", "UP", "RIGHT"], 
				"strumAnims" => ["LEFT", "DOWN", "UP", "RIGHT"], 
				"pixelAnimIndex" => [0, 1, 2, 3],
				"colArray" => [0, 1, 2, 3]
			],

		4 => [
				"letters" => ["A", "B", "E", "C", "D"], 
				"anims" => ["LEFT", "DOWN", "UP", "UP", "RIGHT"],
				"strumAnims" => ["LEFT", "DOWN", "SPACE", "UP", "RIGHT"], 
				"pixelAnimIndex" => [0, 1, 4, 2, 3],
				"colArray" => [0, 1, 2, 2, 3]
			],
		5 => [
				"letters" => ["A", "C", "D", "F", "B", "I"], 
				"anims" => ["LEFT", "UP", "RIGHT", "LEFT", "DOWN", "RIGHT"],
				"strumAnims" => ["LEFT", "UP", "RIGHT", "LEFT", "DOWN", "RIGHT"], 
				"pixelAnimIndex" => [0, 2, 3, 5, 1, 8],
				"colArray" => [0, 2, 3, 0, 1, 3]
			],
		6 => [
				"letters" => ["A", "C", "D", "E", "F", "B", "I"], 
				"anims" => ["LEFT", "UP", "RIGHT", "UP", "LEFT", "DOWN", "RIGHT"],
				"strumAnims" => ["LEFT", "UP", "RIGHT", "SPACE", "LEFT", "DOWN", "RIGHT"], 
				"pixelAnimIndex" => [0, 2, 3, 4, 5, 1, 8],
				"colArray" => [0, 2, 3, 2, 0, 1, 3]
			],
		7 => [
				"letters" => ["A", "B", "C", "D", "F", "G", "H", "I"], 
				"anims" => ["LEFT", "DOWN", "UP", "RIGHT", "LEFT", "DOWN", "UP", "RIGHT"],
				"strumAnims" => ["LEFT", "DOWN", "UP", "RIGHT", "LEFT", "DOWN", "UP", "RIGHT"], 
				"pixelAnimIndex" => [0, 1, 2, 3, 5, 6, 7, 8],
				"colArray" => [0, 1, 2, 3, 0, 1, 2, 3]
			],
		8 => [
				"letters" => ["A", "B", "C", "D", "E", "F", "G", "H", "I"], 
				"anims" => ["LEFT", "DOWN", "UP", "RIGHT", "UP", "LEFT", "DOWN", "UP", "RIGHT"],
				"strumAnims" => ["LEFT", "DOWN", "UP", "RIGHT", "SPACE", "LEFT", "DOWN", "UP", "RIGHT"], 
				"pixelAnimIndex" => [0, 1, 2, 3, 4, 5, 6, 7, 8],
				"colArray" => [0, 1, 2, 3, 2, 0, 1, 2, 3]
			],
		9 => [
				"letters" => ["A", "B", "C", "D", "E", "N", "F", "G", "H", "I"], 
				"anims" => ["LEFT", "DOWN", "UP", "RIGHT", "UP", "UP", "LEFT", "DOWN", "UP", "RIGHT"],
				"strumAnims" => ["LEFT", "DOWN", "UP", "RIGHT", "SPACE", "CIRCLE", "LEFT", "DOWN", "UP", "RIGHT"], 
				"pixelAnimIndex" => [0, 1, 2, 3, 4, 13, 5, 6, 7, 8],
				"colArray" => [0, 1, 2, 3, 2, 2, 0, 1, 2, 3]
			],
		10 => [
				"letters" => ["A", "B", "C", "D", "J", "E", "M", "F", "G", "H", "I"], 
				"anims" => ["LEFT", "DOWN", "UP", "RIGHT", "LEFT", "UP", "RIGHT", "LEFT", "DOWN", "UP", "RIGHT"],
				"strumAnims" => ["LEFT", "DOWN", "UP", "RIGHT", "CIRCLE", "SPACE", "CIRCLE", "LEFT", "DOWN", "UP", "RIGHT"], 
				"pixelAnimIndex" => [0, 1, 2, 3, 9, 4, 12, 5, 6, 7, 8],
				"colArray" => [0, 1, 2, 3, 0, 2, 3, 0, 1, 2, 3]
			],
		11 => [
				"letters" => ["A", "B", "C", "D", "J", "K", "L", "M", "F", "G", "H", "I"], 
				"anims" => ["LEFT", "DOWN", "UP", "RIGHT", "LEFT", "DOWN", "UP", "RIGHT", "LEFT", "DOWN", "UP", "RIGHT"],
				"strumAnims" => ["LEFT", "DOWN", "UP", "RIGHT", "CIRCLE", "CIRCLE", "CIRCLE", "CIRCLE", "LEFT", "DOWN", "UP", "RIGHT"], 
				"pixelAnimIndex" => [0, 1, 2, 3, 9, 10, 11, 12, 5, 6, 7, 8],
				"colArray" => [0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3]
			],
		12 => [
				"letters" => ["A", "B", "C", "D", "J", "K", "N", "L", "M", "F", "G", "H", "I"], 
				"anims" => ["LEFT", "DOWN", "UP", "RIGHT", "LEFT", "DOWN", "UP", "UP", "RIGHT", "LEFT", "DOWN", "UP", "RIGHT"],
				"strumAnims" => ["LEFT", "DOWN", "UP", "RIGHT", "CIRCLE", "CIRCLE", "CIRCLE", "CIRCLE", "CIRCLE", "LEFT", "DOWN", "UP", "RIGHT"], 
				"pixelAnimIndex" => [0, 1, 2, 3, 9, 10, 13, 11, 12, 5, 6, 7, 8],
				"colArray" => [0, 1, 2, 3, 0, 1, 2, 2, 3, 0, 1, 2, 3]
			],
		13 => [
				"letters" => ["A", "B", "C", "D", "J", "K", "E", "N", "L", "M", "F", "G", "H", "I"], 
				"anims" => ["LEFT", "DOWN", "UP", "RIGHT", "LEFT", "DOWN", "UP", "UP", "UP", "RIGHT", "LEFT", "DOWN", "UP", "RIGHT"],
				"strumAnims" => ["LEFT", "DOWN", "UP", "RIGHT", "CIRCLE", "CIRCLE", "SPACE", "CIRCLE", "CIRCLE", "CIRCLE", "LEFT", "DOWN", "UP", "RIGHT"], 
				"pixelAnimIndex" => [0, 1, 2, 3, 9, 10, 4, 13, 11, 12, 5, 6, 7, 8],
				"colArray" => [0, 1, 2, 3, 0, 1, 2, 2, 2, 3, 0, 1, 2, 3]
			],
		14 => [
				"letters" => ["A", "B", "C", "D", "J", "K", "E", "N", "E", "L", "M", "F", "G", "H", "I"], 
				"anims" => ["LEFT", "DOWN", "UP", "RIGHT", "LEFT", "DOWN", "UP", "UP", "UP", "UP", "RIGHT", "LEFT", "DOWN", "UP", "RIGHT"],
				"strumAnims" => ["LEFT", "DOWN", "UP", "RIGHT", "CIRCLE", "CIRCLE", "SPACE", "CIRCLE", "SPACE", "CIRCLE", "CIRCLE", "LEFT", "DOWN", "UP", "RIGHT"], 
				"pixelAnimIndex" => [0, 1, 2, 3, 9, 10, 4, 13, 4, 11, 12, 5, 6, 7, 8],
				"colArray" => [0, 1, 2, 3, 0, 1, 2, 2, 2, 2, 3, 0, 1, 2, 3]
			],
		15 => [
				"letters" => ["A", "B", "C", "D", "J", "K", "L", "M", "O", "P", "Q", "R", "F", "G", "H", "I"], 
				"anims" => ["LEFT", "DOWN", "UP", "RIGHT", "LEFT", "DOWN", "UP", "RIGHT", "LEFT", "DOWN", "UP", "RIGHT", "LEFT", "DOWN", "UP", "RIGHT"],
				"strumAnims" => ["LEFT", "DOWN", "UP", "RIGHT", "CIRCLE", "CIRCLE", "CIRCLE", "CIRCLE", "CIRCLE", "CIRCLE", "CIRCLE", "CIRCLE", "LEFT", "DOWN", "UP", "RIGHT"], 
				"pixelAnimIndex" => [0, 1, 2, 3, 9, 10, 11, 12, 14, 15, 16, 17, 5, 6, 7, 8],
				"colArray" => [0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3]
			],
		16 => [
				"letters" => ["A", "B", "C", "D", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "F", "G", "H", "I"], 
				"anims" => ["LEFT", "DOWN", "UP", "RIGHT", "LEFT", "DOWN", "UP", "UP", "RIGHT", "LEFT", "DOWN", "UP", "RIGHT", "LEFT", "DOWN", "UP", "RIGHT"],
				"strumAnims" => ["LEFT", "DOWN", "UP", "RIGHT", "CIRCLE", "CIRCLE", "CIRCLE", "CIRCLE", "CIRCLE", "CIRCLE", "CIRCLE", "CIRCLE", "CIRCLE", "LEFT", "DOWN", "UP", "RIGHT"], 
				"pixelAnimIndex" => [0, 1, 2, 3, 9, 10, 11, 12, 13, 14, 15, 16, 17, 5, 6, 7, 8],
				"colArray" => [0, 1, 2, 3, 0, 1, 2, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3]
		],
		17 => [
				"letters" => ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I',
				'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R'], 
				"anims" => ["LEFT", "DOWN", "UP", "RIGHT", "UP", "LEFT", "DOWN", "UP", "RIGHT",
				"LEFT", "DOWN", "UP", "RIGHT", "UP", "LEFT", "DOWN", "UP", "RIGHT"],
				"strumAnims" => ["LEFT", "DOWN", "UP", "RIGHT", "SPACE", "LEFT", "DOWN", "UP", "RIGHT", 
				"LEFT", "DOWN", "UP", "RIGHT", "CIRCLE", "LEFT", "DOWN", "UP", "RIGHT"], 
				"pixelAnimIndex" => [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17],
				"colArray" => [0, 1, 2, 3, 2, 0, 1, 2, 3, 0, 1, 2, 3, 2, 0, 1, 2, 3]
		],
	];

	public static var pixelScales:Array<Float> = [
        1.2, //1k
        1.15, //2k
        1.1, //3k
        1, //4k
        0.9, //5k
        0.83, //6k
        0.8, //7k
        0.74, //8k
        0.7, //9k
        0.6, //10k
        0.55,//11k
        0.5, //12k
        0.48, //13k
        0.48, //14k
        0.42, //15k
        0.38, //16k
        0.38, //17k
        0.32 //18k
    ];

	// End of extra keys stuff

	//This is needed for the hardcoded note types to appear on the Chart Editor,
	//It's also used for backwards compatibility with 0.1 - 0.3.2 charts.
	public static final defaultNoteTypes:Array<String> = [
		'',
		'Alt Animation',
		'Hey!',
		'Hurt Note',
		'GF Sing',
		'No Animation',
		'EX Note',
		'GF Duet',
		'Beatbox Note',
		'Both Note',
		'Both Alt Note'
	];

	public var extraData:Map<String, Dynamic> = new Map<String, Dynamic>();

	public var parentST:Float = 0;
	public var parentSL:Float = 0;
	public var strumTime:Float = 0;
	public var mustPress:Bool = false;
	public var doOppStuff:Bool = false;
	public var canBeHit:Bool = false;
	public var tooLate:Bool = false;
	public var wasGoodHit:Bool = false;
	public var ignoreNote:Bool = false;
	public var hitByOpponent:Bool = false; //For Opponent notes

	public var blockHit:Bool = false; // only works for player

	public var noteDensity:Float = 1;

	public var sustainLength:Float = 0;
	public var isSustainNote:Bool = false;
	public var isSustainEnd:Bool = false;
	public var noteType(default, set):String = null;

	public var eventName:String = '';
	public var eventLength:Int = 0;
	public var eventVal1:String = '';
	public var eventVal2:String = '';

	public var rgbShader:RGBShaderReference;
	public static var globalRgbShaders:Array<RGBPalette> = [];
	public var inEditor:Bool = Type.getClassName(Type.getClass(FlxG.state)) == 'editors.ChartingState';

	public var animSuffix:String = '';
	public var gfNote:Bool = false;
	public var earlyHitMult:Float = 0.5;
	public var lateHitMult:Float = 1;
	public var lowPriority:Bool = false;
	public var mania:Int = 3;

	public static final SUSTAIN_SIZE:Int = 44;
	public static final swagWidth:Float = 160 * 0.7;
	public static var swagWidthAlt:Float = 160; //For ModManager
	@:noCompletion private static function set_swagWidth(val:Float){
		halfWidth = val * 0.5;
		return val;
	}
	
	public static final colArray:Array<String> = ['purple', 'blue', 'green', 'red'];
	public static var defaultNoteSkin(default, never):String = 'noteskins/NOTE_assets';

	public var noteSplashData:NoteSplashData = {
		disabled: false,
		texture: null,
		antialiasing: !PlayState.isPixelStage,
		useGlobalShader: false,
		useRGBShader: (PlayState.SONG != null) ? !(PlayState.SONG.disableNoteRGB == true) : true,
		r: -1,
		g: -1,
		b: -1,
		a: 1
	};
	public var noteHoldSplash:SustainSplash;

	// Lua shit
	public var noteSplashDisabled:Bool = false;

	public var offsetAngle:Float = 0;
	public var multAlpha:Float = 1;
	public var multSpeed:Float = 1;

	public var copyX:Bool = true;
	public var copyY:Bool = true;
	public var copyAngle:Bool = true;
	public var copyAlpha:Bool = true;
	public var copyScaleX:Bool = true;
	public var copyScaleY:Bool = true;

	public var hitHealth:Float = 0.023;
	public var missHealth:Float = 0.0475;
	public var rating:String = 'unknown';
	public var ratingMod:Float = 0; //9 = unknown, 0.25 = shit, 0.5 = bad, 0.75 = good, 1 = sick
	public var ratingDisabled:Bool = false;

	public var texture(default, set):String = null;

	public var sustainScale:Float = 1.0;

	public var noAnimation:Bool = false;
	public var noMissAnimation:Bool = false;
	public var hitCausesMiss:Bool = false;
	public var distance:Float = 2000; //plan on doing scroll directions soon -bb

	public var hitsoundDisabled:Bool = false;

	public var pixelNote:Bool = false;
	public var useRGBShader(default, set):Bool = true;

	//Action Engine Stuff
	public var noteIndex:Int = -1;

	//AI Stuff
	public var AIStrumTime:Float = 0;
	public var AIMiss:Bool = false;

	//Archipelago
	public var isCheck:Bool = false;
	public var isMine:Bool = false;
	public var isAlert:Bool = false;
	public var isHeal:Bool = false;
	public var isFreeze:Bool = false;
	public var isFakeHeal:Bool = false;
	var justMixedUp:Bool = false;
	public var trueNoteData:Int = 0;
	public var specialNote:Bool = false;
	public var ignoreMiss:Bool = false;
	public var spinAmount:Float = 0;
	public var rootNote:Note;
	var posTween:FlxTween;

	//Mixtape Engine
	var ogW:Float;
	var ogH:Float;
	public var cod:String = '???';
	/** 
	 * The maximum amount of time you can release a hold before it counts as a miss
	**/
	public var maxReleaseTime:Float = 0.25;
	/** 
	 * If you need to tap the note to hit it, or just have the direction be held when it can be judged to hit.
	 * An example is Stepmania mines 
	**/
	public var requiresTap:Bool = true; 
	// mod manager
	public var garbage:Bool = false; // if this is true, the note will be removed in the next update cycle
	public var realColumn:Int;
	public var holdingTime:Float = 0;
	public var isParent:Bool; // ke input shits
	public var causedMiss:Bool = false;
	public var childs:Array<Note> = [];
	public var unhitTail:Array<Note> = [];
	public var susActive:Bool = true;
	public var tripProgress:Float = 0;
	public var isHeld:Bool = false;
	public var spawned:Bool = false;
	public var zIndex:Float = 0;
	public var tail:Array<Note> = []; 
	public var parent:Note;
	public var correctionOffset:Float = 0; //dont mess with this
	public var visualTime:Float = 0;
	public static var halfWidth(default, null):Float = swagWidth * 0.5;
	public var typeOffsetX:Float = 0; // used to offset notes, mainly for note types. use in place of offset.x and offset.y when offsetting notetypes
	public var typeOffsetY:Float = 0;
	public static var defaultWidth:Float = 0;
	public static var defaultHeight:Float = 0;
	public var beat:Float = 0;
	public var typeOffsetAngle:Float = 0;
	@:isVar
	public var realNoteData(get, set):Int; // backwards compat
	public var fieldIndex:Int = -1; // Used to denote which PlayField to be placed into
	// Leave -1 if it should be automatically determined based on mustPress and placed into either bf or dad's based on that.
	// Note that holds automatically have this set to their parent's fieldIndex
	public var field:PlayField; // same as fieldIndex but lets you set the field directly incase you wanna do that i  guess
    inline function get_realNoteData()
        return realColumn;
    inline function set_realNoteData(v:Int)
        return realColumn = v;

	private function set_useRGBShader(value:Bool):Bool {
		if (useRGBShader != value) 
		{
			useRGBShader = value;
			if (rgbShader != null) rgbShader.enabled = value;
		}
		return value;
	}

	var changeSize:Bool = false;
	private function set_texture(value:String):String {
		if (value.length == 0) value = Paths.defaultSkin;
		if (!pixelNote && texture != value)
		{
			changeSize = false;
			if (!Paths.noteSkinFramesMap.exists(value)) Paths.initNote(4, value);
			if (frames != @:privateAccess Paths.noteSkinFramesMap.get(value)) frames = @:privateAccess Paths.noteSkinFramesMap.get(value);
			if (animation != @:privateAccess Paths.noteSkinAnimsMap.get(value)) animation.copyFrom(@:privateAccess Paths.noteSkinAnimsMap.get(value));

			if (!changeSize) 
			{
				changeSize = true;
				setGraphicSize(Std.int(width * 0.7));
				updateHitbox();
			}
			offsetX = 0;
		}
		else if (!pixelNote) return value;
		else if (pixelNote && inEditor) reloadNote(value);
		texture = value;
		return value;
	}

	public function defaultRGB()
	{
		noteColor = inline initializeGlobalRGBShader(noteData);

		rgbShader.r = noteColor.r;
		rgbShader.g = noteColor.g;
		rgbShader.b = noteColor.b;
	}

	private function set_noteType(value:String):String {
		noteSplashData.texture = PlayState.SONG != null ? PlayState.SONG.splashSkin : 'noteSplashes';
		if (ClientPrefs.data.noteColorStyle == 'Normal' && rgbShader != null && useRGBShader) defaultRGB();

		if(noteData > -1 && noteType != value) {
			if (value != null && value.length > 1) NoteTypesConfig.applyNoteTypeData(this, value);
			noteType = value;
		}
		return value;
	}

	public function new(?newStrumTime:Float, ?newNoteData:Int)
	{
		super();
		objType = NOTE;
		animation = new PsychAnimationController(this);
		pixelNote = PlayState.isPixelStage;
		mania = PlayState.mania;

		beat = Conductor.getBeat(strumTime);

		if (!Math.isNaN(newNoteData) && pixelNote) noteData = newNoteData;
		if (!Math.isNaN(newStrumTime)) strumTime = newStrumTime;
		if (newStrumTime != -1 && !inEditor) visualTime = PlayState.instance.getNoteInitialTime(this.strumTime);

		y -= 2000;
		antialiasing = ClientPrefs.data.globalAntialiasing && !pixelNote;

		if(noteData > -1) {
			if (ClientPrefs.data.showNotes) texture = Paths.defaultSkin;

			if (ClientPrefs.data.enableColorShader)
			{
				try{ rgbShader = new RGBShaderReference(this, initializeGlobalRGBShader(noteData, this)); }
				catch(e) {};
				if(PlayState.SONG != null && PlayState.SONG.disableNoteRGB) rgbShader.enabled = useRGBShader = false;
			}
			else useRGBShader = false;
		}
	}

	public static function initializeGlobalRGBShader(noteData:Int, ?note:Note = null)
	{
		if (note == null)
		{
			if(globalRgbShaders[noteData] == null)
			{
				var newRGB:RGBPalette = new RGBPalette();
				globalRgbShaders[noteData] = newRGB;

				var arr:Array<FlxColor> = ClientPrefs.data.noteColorStyle != 'Quant-Based' ? (!PlayState.isPixelStage) ? ClientPrefs.data.arrowRGBExtra[noteData] : ClientPrefs.data.arrowRGBPixelExtra[noteData] : ClientPrefs.data.quantRGB[noteData];
				if (noteData > -1 && noteData <= arr.length)
				{
					newRGB.r = arr[0];
					newRGB.g = arr[1];
					newRGB.b = arr[2];
				}
			}
			return globalRgbShaders[noteData];
		}
		else switch(ClientPrefs.data.noteColorStyle)
		{
			case 'Quant-Based':
			if(globalRgbShaders[0] == null)
			{
				var newRGB:RGBPalette = new RGBPalette();
				globalRgbShaders[0] = newRGB;

				var arr:Array<FlxColor> = (!note.pixelNote) ? ClientPrefs.data.arrowRGBExtra[3] : ClientPrefs.data.arrowRGBPixelExtra[3];
				if (noteData > -1)
				{
					newRGB.r = arr[0];
					newRGB.g = arr[1];
					newRGB.b = arr[2];
				}
			}
			return globalRgbShaders[0];
			case 'Grayscale', 'Rainbow', 'Char-Based':
			if(globalRgbShaders[0] == null)
			{
				var newRGB:RGBPalette = new RGBPalette();
				globalRgbShaders[0] = newRGB;

				if (noteData > -1)
				{
					newRGB.r = 0xFFA0A0A0;
					newRGB.g = FlxColor.WHITE;
					newRGB.b = 0xFF424242;
				}
			}
			return globalRgbShaders[0];
			default:
			if(globalRgbShaders[noteData] == null)
			{
				var newRGB:RGBPalette = new RGBPalette();
				globalRgbShaders[noteData] = newRGB;

				var arr:Array<FlxColor> = (!note.pixelNote) ? ClientPrefs.data.arrowRGBExtra[noteData] : ClientPrefs.data.arrowRGBPixelExtra[noteData];
				if (noteData > -1 && noteData <= arr.length)
				{
					newRGB.r = arr[0];
					newRGB.g = arr[1];
					newRGB.b = arr[2];
				}
			}
			return globalRgbShaders[noteData];
		}
	}

	var _lastNoteOffX:Float = 0;
	static var _lastValidChecked:String; //optimization
	public var originalHeight:Float = 6;
	public function reloadNote(?texture:String = '', ?postfix:String = '') {
		if(texture == null) texture = '';
		if(postfix == null) postfix = '';

		var skin:String = texture + postfix;
		if(texture.length < 1) {
			skin = PlayState.SONG != null ? PlayState.SONG.arrowSkin : null;
			if(skin == null || skin.length < 1)
				skin = defaultNoteSkin + postfix;
		}

		var animName:String = null;
		if(animation.curAnim != null) {
			animName = animation.curAnim.name;
		}

		var skinPixel:String = skin;
		var lastScaleY:Float = scale.y;
		var skinPostfix:String = getNoteSkinPostfix();
		var customSkin:String = skin + skinPostfix;
		var path:String = pixelNote ? 'pixelUI/' : '';
		if(customSkin == _lastValidChecked || Paths.fileExists('images/' + path + customSkin + '.png', IMAGE))
		{
			skin = customSkin;
			_lastValidChecked = customSkin;
		}
		else skinPostfix = '';

		defaultWidth = 157;
		defaultHeight = 154;

		if(pixelNote) {
			if (isSustainNote)
			{
				loadGraphic(Paths.image('pixelUI/' + skinPixel + 'ENDS' + skinPostfix, null, true));
				width = width / Note.pixelNotesDivisionValue;
				height = height / 6;
				loadGraphic(Paths.image('pixelUI/' + skinPixel + 'ENDS' + skinPostfix, null, true), true, Math.floor(width), 0);
			}
			else
			{
				loadGraphic(Paths.image('pixelUI/' + skinPixel + skinPostfix, null, true));
				width = width / Note.pixelNotesDivisionValue;
				height = height / 5;
				loadGraphic(Paths.image('pixelUI/' + skinPixel + skinPostfix, null, true), true, Math.floor(width), Math.floor(height));
			}
			setGraphicSize(Std.int(width * PlayState.daPixelZoom * Note.pixelScales[mania]), 0);
			loadPixelNoteAnims();
			antialiasing = false;
		} else {
			frames = Paths.getSparrowAtlas(skin, null, true);
			loadNoteAnims();
			if(!isSustainNote)
			{
				centerOffsets();
				centerOrigin();
			}
			antialiasing = ClientPrefs.data.globalAntialiasing;
		}
		if(isSustainNote) {
			scale.y = lastScaleY;
		}
		updateHitbox();

		if(animName != null)
			animation.play(animName, true);
			
		if(inEditor) {
			setGraphicSize(states.editors.charting.JSChartingState.GRID_SIZE, states.editors.charting.JSChartingState.GRID_SIZE);
			updateHitbox();
		}
	}

	public static function getNoteSkinPostfix()
	{
		var skin:String = '';
		if(ClientPrefs.data.noteSkin != 'Default')
			skin = '-' + ClientPrefs.data.noteSkin.trim().toLowerCase().replace(' ', '_');
		return skin;
	}

	public function loadNoteAnims() {
		_loadNoteAnims();
	}

	function _loadNoteAnims() {
		for (i in 0...gfxLetter.length)
		{
			attemptToAddAnimationByPrefix(gfxLetter[i], gfxLetter[i] + '0');
			attemptToAddAnimationByPrefix(gfxLetter[i], colArray[Note.keysShit.get(mania).get('colArray')[noteData]] + '0');
			attemptToAddAnimationByPrefix(gfxLetter[i], colArray[Note.keysShit.get(mania).get('colArray')[noteData]] + '0');

			if (isSustainNote)
			{
				attemptToAddAnimationByPrefix(gfxLetter[i] + ' tail', colArray[Note.keysShit.get(mania).get('colArray')[noteData]] + ' hold end');
				attemptToAddAnimationByPrefix(gfxLetter[i] + ' hold', colArray[Note.keysShit.get(mania).get('colArray')[noteData]] + ' hold piece');
				attemptToAddAnimationByPrefix(gfxLetter[i] + ' hold', gfxLetter[i] + ' hold');
				attemptToAddAnimationByPrefix(gfxLetter[i] + ' tail', gfxLetter[i] + ' tail');

				attemptToAddAnimationByPrefix(gfxLetter[i] + ' tail', 'pruple end hold');
				attemptToAddAnimationByPrefix(gfxLetter[i] + ' tail', colArray[Note.keysShit.get(mania).get('colArray')[noteData]] + ' hold end');

				attemptToAddAnimationByPrefix(gfxLetter[i] + ' hold', colArray[Note.keysShit.get(mania).get('colArray')[noteData]] + ' hold piece');
			}
		}

		ogW = width;
		ogH = height;
		if (!isSustainNote)
			setGraphicSize(Std.int(defaultWidth * scales[mania]));
		else
			setGraphicSize(Std.int(defaultWidth * scales[mania]), Std.int(defaultHeight * scales[0]));
		updateHitbox();
	}

	function attemptToAddAnimationByPrefix(name:String, prefix:String, framerate:Float = 24, doLoop:Bool = true)
	{
		var animFrames = [];
		@:privateAccess
		animation.findByPrefix(animFrames, prefix); // adds valid frames to animFrames
		if(animFrames.length < 1) return;

		animation.addByPrefix(name, prefix, framerate, doLoop);
	}

	function loadPixelNoteAnims() {
		for (i in 0...gfxLetter.length)
		{
			animation.add(gfxLetter[i], [i + pixelNotesDivisionValue]);
			if (isSustainNote)
			{
				animation.add(gfxLetter[i] + ' hold', [i]);
				animation.add(gfxLetter[i] + ' tail', [i + pixelNotesDivisionValue]);
			}
		}
	}

	override function update(elapsed:Float)
	{
		if (Type.getClassName(Type.getClass(FlxG.state)) == 'PlayState' && PlayState.instance.cpuControlled) return;
		
		super.update(elapsed);

		if (mustPress)
		{
			canBeHit = (strumTime > Conductor.songPosition - (Conductor.safeZoneOffset * lateHitMult) &&
						strumTime < Conductor.songPosition + (Conductor.safeZoneOffset * earlyHitMult));

			if (strumTime < Conductor.songPosition - Conductor.safeZoneOffset && !wasGoodHit && !ignoreNote)
				tooLate = true;
			else tooLate = false;
		}
		else
		{
			canBeHit = false;

			if (strumTime < Conductor.songPosition + (Conductor.safeZoneOffset * earlyHitMult))
			{
				if(strumTime <= Conductor.songPosition)
					wasGoodHit = true;
			}
		}

		if (tooLate && !inEditor)
		{
			if (alpha > 0.3)
				alpha = 0.3;
		}
	}

	inline public function followStrum(strum:StrumNote, songSpeed:Float = 1):Void
	{
		if (isSustainNote) 
		{
			flipY = ClientPrefs.data.downScroll;
			scale.set(0.7, animation != null && animation.curAnim != null && animation.curAnim.name.endsWith('end') ? 1 : Conductor.stepCrochet * 0.0105 * (songSpeed * multSpeed) * sustainScale);

			if (PlayState.isPixelStage) 
			{
				scale.y *= PlayState.daPixelZoom * 1.20;
				scale.x *= PlayState.daPixelZoom;
			}
			updateHitbox();
		}
			
		distance = (0.45 * (Conductor.songPosition - strumTime) * songSpeed * multSpeed);
		if (!ClientPrefs.data.downScroll) distance *= -1;

		if (copyAngle)
			angle = strum.direction - 90 + strum.angle + offsetAngle;

		if(copyAlpha)
			alpha = strum.alpha * multAlpha;

		if(copyX)
			x = strum.x + offsetX + Math.cos(strum.direction * Math.PI / 180) * distance;

		if(copyY)
		{
			y = strum.y + offsetY + (!isSustainNote || ClientPrefs.data.downScroll ? 0 : 55) + Math.sin(strum.direction * Math.PI / 180) * distance;
			if(strum.downScroll && isSustainNote)
			{
				if(PlayState.isPixelStage)
				{
					y -= PlayState.daPixelZoom * 9.5;
				}
				y -= (frameHeight * scale.y) - (Note.swagWidth / 2);
			}
		}

		if(copyScaleX && !isSustainNote) //if i did this on sustain notes it would break, sorry!
		{
			scale.x = strum.scale.x;
		}
		if(copyScaleY && !isSustainNote)
		{
			scale.y = strum.scale.y;
		}
	}

	public function clipToStrumNote(myStrum:StrumNote)
	{
		final center:Float = myStrum.y + offsetY + Note.swagWidth / 2;
		if(isSustainNote && (mustPress || !ignoreNote) &&
			(!mustPress || (wasGoodHit || !canBeHit)))
		{
			final swagRect:FlxRect = clipRect != null ? clipRect : new FlxRect(0, 0, frameWidth, frameHeight);

			if (myStrum.downScroll)
			{
				if(y - offset.y * scale.y + height >= center)
				{
					swagRect.width = frameWidth;
					swagRect.height = (center - y) / scale.y;
					swagRect.y = frameHeight - swagRect.height;
				}
			}
			else if (y + offset.y * scale.y <= center)
			{
				swagRect.y = (center - y) / scale.y;
				swagRect.width = width / scale.x;
				swagRect.height = (height / scale.y) - swagRect.y;
			}
			clipRect = swagRect;
		}
	}
	
	@:noCompletion
	override function set_clipRect(rect:FlxRect):FlxRect
	{
		clipRect = rect;

		if (frames != null)
			frame = frames.frames[animation.frameIndex];

		return rect;
	}

	public override function destroy()
	{
		super.destroy();
		_lastValidChecked = '';
	}

	var noteColor:RGBPalette;
	var superCoolColor = null;
	var arr:Array<Int> = [255, 255, 255];
	public function updateRGBColors()
	{
		if (rgbShader == null && useRGBShader) rgbShader = new RGBShaderReference(this, initializeGlobalRGBShader(noteData, this));
		else switch(ClientPrefs.data.noteColorStyle)
		{
			case 'Rainbow':
			superCoolColor = new FlxColor(0xFFFF0000);
			superCoolColor.hue = (strumTime / 5000 * 360) % 360;
			rgbShader.r = superCoolColor;
			rgbShader.g = FlxColor.WHITE;
			rgbShader.b = superCoolColor.getDarkened(0.7);
			
			case 'Quant-Based':
			CoolUtil.checkNoteQuant(this, (!isSustainNote ? strumTime : parentST), rgbShader);

			case 'Char-Based':
			if (PlayState.instance != null)
			{
				arr = CoolUtil.getHealthColors(doOppStuff ? PlayState.instance.dad : PlayState.instance.boyfriend);
				if (gfNote) arr = CoolUtil.getHealthColors(PlayState.instance.gf);
				if (noteData > -1)
				{
					rgbShader.r = FlxColor.fromRGB(arr[0], arr[1], arr[2]);
					rgbShader.g = FlxColor.WHITE;
					rgbShader.b = rgbShader.r;
					rgbShader.b = rgbShader.b.getDarkened(0.7);
				}
			}
			else defaultRGB();

			default:
			
		}
		if (noteType == 'Hurt Note' && rgbShader != null)
		{
				// note colors
				rgbShader.r = 0xFF101010;
				rgbShader.g = 0xFFFF0000;
				rgbShader.b = 0xFF990022;

				// splash data and colors
				noteSplashData.r = 0xFFFF0000;
				noteSplashData.g = 0xFF101010;
				noteSplashData.texture = 'noteSplashes/noteSplashes-electric';
		}
		else if (rgbShader != null)
		{
			noteSplashData.r = -1;
			noteSplashData.g = -1;
			noteSplashData.b = -1;
		}
	}

	// this is used for note recycling
	var firstOffX = false;
	var shouldCenterOffsets:Bool = true;
	public function setupNoteData(chartNoteData:PreloadedChartNote):Void 
	{
		wasGoodHit = hitByOpponent = tooLate = canBeHit = false; // Don't make an update call of this for the note group

		if (chartNoteData.noteskin.length > 0 && chartNoteData.noteskin != '' && chartNoteData.noteskin != texture) 
		{
			texture = 'noteskins/' + chartNoteData.noteskin;
			useRGBShader = false;
		}
		if (chartNoteData.texture.length > 0 && chartNoteData.texture != texture) 
		{
			texture = chartNoteData.texture;
			shouldCenterOffsets = false;
		}
		if ((chartNoteData.noteskin.length < 1 && chartNoteData.texture.length < 1) && texture != Paths.defaultSkin)
		{
			texture = Paths.defaultSkin;
			useRGBShader = ClientPrefs.data.enableColorShader;
			shouldCenterOffsets = ClientPrefs.data.enableColorShader;
		}

		strumTime = chartNoteData.strumTime;
		if(!inEditor) strumTime += ClientPrefs.data.noteOffset;
		if (strumTime != -1 && !inEditor) visualTime = chartNoteData.visualTime;
		noteData = chartNoteData.noteData % 4;
		noteType = chartNoteData.noteType;
		animSuffix = chartNoteData.animSuffix;
		noAnimation = noMissAnimation = chartNoteData.noAnimation;
		mustPress = chartNoteData.mustPress;
		doOppStuff = chartNoteData.oppNote;
		gfNote = chartNoteData.gfNote;
		isSustainNote = chartNoteData.isSustainNote;
		isSustainEnd = chartNoteData.isSustainEnd;
		lowPriority = chartNoteData.lowPriority;
		if (isSustainNote) {
			parentST = chartNoteData.parentST;
			parentSL = chartNoteData.parentSL;
		}
		
		hitHealth = chartNoteData.hitHealth;
		missHealth = chartNoteData.missHealth;
		hitCausesMiss = chartNoteData.hitCausesMiss;
		ignoreNote = chartNoteData.ignoreNote;
		blockHit = chartNoteData.blockHit;
		multSpeed = chartNoteData.multSpeed;
		noteDensity = chartNoteData.noteDensity;

		if (ClientPrefs.data.enableColorShader && useRGBShader)
		{
			if (rgbShader == null) rgbShader = new RGBShaderReference(this, initializeGlobalRGBShader(noteData, this));
			updateRGBColors();
		}

		if (noteType == 'Hurt Note' && !ClientPrefs.data.enableColorShader)
		{
			texture = 'HURTNOTE_assets';
			noteSplashData.texture = 'noteSplashes/HURTnoteSplashes';
		}

		if (PlayState.isPixelStage)
		{
			reloadNote(texture);
			if (isSustainNote && !firstOffX) 
			{
				firstOffX = true;
				offsetX += 30;
			}
		}

		if (!changeSize && !PlayState.isPixelStage) 
		{
			changeSize = true;
			setGraphicSize(Std.int(width * 0.7));
			updateHitbox();
		}

		if (isSustainNote) {
			offsetX += width / 2;
			copyAngle = false;
			animation.play(colArray[noteData % 4] + (chartNoteData.isSustainEnd ? 'holdend' : 'hold'));
			updateHitbox();
			offsetX -= width / 2;

			if (!PlayState.isPixelStage)
				sustainScale = Note.SUSTAIN_SIZE / frameHeight;
				
			updateHitbox();
		}
		else {
			animation.play(colArray[noteData % 4] + 'Scroll');
			if (!copyAngle) copyAngle = true;
			offsetX = 0; //Just in case we recycle a sustain note to a regular note
			if (useRGBShader && shouldCenterOffsets)
			{
				centerOffsets();
				centerOrigin();
			}
		}
		angle = 0;

		clipRect = null;
		if (!mustPress) 
		{
			visible = ClientPrefs.data.opponentStrums;
			alpha = ClientPrefs.data.middleScroll ? ClientPrefs.data.oppNoteAlpha : 1;
		}
		else
		{
			if (!visible) visible = true;
			if (alpha != 1) alpha = 1; //if (multAlpha != 1) multAlpha = 1;
		}
		if (flipY) flipY = false;
	}
}