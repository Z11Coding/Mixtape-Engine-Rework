package archipelago;

import substates.RankingSubstate;
import states.FreeplayState;
import backend.modules.SyncUtils;
#if sys
import sys.FileSystem;
import sys.io.File;
#end

import archipelago.*;
import flixel.FlxSprite;
import haxe.DynamicAccess;
import haxe.Timer;
import archipelago.Client;
import archipelago.APGameState;
import substates.Prompt;
import flixel.FlxG;
import flixel.FlxState;
import flixel.text.FlxText;
import flixel.util.FlxColor;
import flixel.util.FlxSave;
import flixel.addons.display.FlxBackdrop;
import flixel.util.FlxGradient;
import haxe.Exception;
import yaml.Yaml;
import yaml.Renderer;
import yaml.Parser;
import flash.net.FileFilter;
import archipelago.PacketTypes.JSONMessagePart;
import archipelago.PacketTypes.NetworkItem;

typedef APSettings =
{
    var name:String;
    var description:String;
    var game:String;
	var FNF:APOptions;
}

typedef APOptions =
{
    var	progression_balancing:String;
    var	accessibility:String;
    var	mods_enabled:Bool;
    var	deathlink:Bool;
    var	unlock_type:String;
    var	unlock_method:String;
	var	graderequirement:String;
	var	accrequirement:String;
    var	songList:Array<String>;
    var	ticket_percentage:Int;
    var	ticket_win_percentage:Int;
    var	chart_modifier_change_chance:Int;
    var	trapAmount:Int;
    var	bbcWeight:Int;
    var	ghostChatWeight:Int;
    var	svcWeight:Int;
    var	tutorialWeight:Int;
    var	fakeTransWeight:Int;
    var	shieldWeight:Int;
    var	MHPWeight:Int;
}

class APEntryState extends FlxState
{
	static final wsCheck = ~/^wss?:\/\//;

	static final APWorld:String = "apworld/fridaynightfunkin.apworld";
	// #if embed
	// @:embed(APWorld) static var apWorldBytes:ByteArray;
	// #end
	private var _hostInput:PsychUIInputText;
	private var _portInput:PsychUIInputText;
	private var _slotInput:PsychUIInputText;
	private var _pwInput:PsychUIInputText;

	private var _tabOrder:Array<PsychUIInputText> = [];
	public static var yamlName:String;
	var checker:FlxBackdrop;
	var gradientBar:FlxSprite = new FlxSprite(0, 0).makeGraphic(FlxG.width, 300, 0x83B700FF);
	var swagShader:ColorSwap = null;
	var titleText:ColoredAlphabet;
	public static var ap:Client;
	public static var apGame:APGameState;

	public static var unlockable:Array<String> = [];
	public static var inArchipelagoMode:Bool = false;
	public static var lowFilterAmount:Float = 1;
	public static var deathLink:Bool = false;
	public static var victorySong:String = '???';
	public static var fullSongCount:Int = 1;

	var fileDialog:FileDialogHandler = new FileDialogHandler();
	var bpmTxt:FlxText;

	//So we have a general idea of what to put in the yaml
	public static var gameSettings:APSettings = {
		name: 'Player',
		description: 'Generated by Funkipelago for Friday Night Funkin',
		game: 'Friday Night Funkin',
		FNF: {
		progression_balancing: "normal",
		accessibility: "full",
		mods_enabled: false,
		deathlink: false,
		unlock_type: 'Songs',
		unlock_method: 'Song Completion',
		graderequirement: "Any",
		accrequirement: "Any",
		songList: [],
		ticket_percentage: 15,
		ticket_win_percentage: 15,
		chart_modifier_change_chance: 15,
		trapAmount: 15,
		bbcWeight: 15,
		ghostChatWeight: 15,
		svcWeight: 15,
		tutorialWeight: 15,
		fakeTransWeight: 15,
		shieldWeight: 15,
		MHPWeight: 15 }
	};

	override function create()
	{
		Cursor.show();
		Cursor.cursorMode = Default;
		swagShader = new ColorSwap();

		if (APSettingsSubState.globalSongList.length <= 0)
			APSettingsSubState.generateSongList();

		// TODO: save last game's settings as default; Reset button to return to base default
		var FNF = new FlxSave();
		FNF.bind("FNF");
		var lastGame:DynamicAccess<String> = FNF.data.lastGame;
		if (lastGame == null)
			lastGame = {
				server: "archipelago.gg",
				port: "38281",
				slot: "Player"
			};
		/*if (FNF.data.gameSettings != null) gameSettings = FNF.data.gameSettings;
		if (gameSettings.FNF == null) gameSettings.FNF = {
			progression_balancing: FNF.data.gameSettings.progression_balancing,
			accessibility: FNF.data.gameSettings.accessibility,
			mods_enabled: FNF.data.gameSettings.mods_enabled,
			deathlink: FNF.data.gameSettings.deathlink,
			graderequirement: FNF.data.gameSettings.graderequirement,
			accrequirement: FNF.data.gameSettings.accrequirement,
			unlock_type: FNF.data.gameSettings.unlock_type,
			unlock_method: FNF.data.gameSettings.unlock_method,
			ticket_percentage: FNF.data.gameSettings.ticket_percentage,
			ticket_win_percentage: FNF.data.gameSettings.ticket_win_percentage,
			chart_modifier_change_chance: FNF.data.gameSettings.chart_modifier_change_chance,
			trapAmount: FNF.data.gameSettings.trapAmount,
			bbcWeight: FNF.data.gameSettings.bbcWeight,
			ghostChatWeight: FNF.data.gameSettings.ghostChatWeight,
			svcWeight: FNF.data.gameSettings.svcWeight,
			tutorialWeight: FNF.data.gameSettings.tutorialWeight,
			fakeTransWeight: FNF.data.gameSettings.fakeTransWeight,
			shieldWeight: FNF.data.gameSettings.shieldWeight,
			MHPWeight: FNF.data.gameSettings.MHPWeight,
			songList: []
		};*/
		
		FNF.destroy();

		var bg = new FlxSprite().loadGraphic(Paths.image("menuBG"));
		bg.screenCenter();
		add(bg);

		if (!ClientPrefs.data.lowQuality)
		{
			gradientBar = FlxGradient.createGradientFlxSprite(Math.round(FlxG.width), 512, [0x00ff0000, 0x675967E4, 0xFD62FF19], 1, 90, true);
			gradientBar.y = FlxG.height - gradientBar.height;
			add(gradientBar);
			gradientBar.scrollFactor.set(0, 0);

			checker = new FlxBackdrop(Paths.image('mainmenu/Main_Checker'), XY, Std.int(0.2), Std.int(0.2));
			add(checker);
			checker.scrollFactor.set(0, 0.07);
		}

		titleText = new ColoredAlphabet(20, 0, "FRIDAY NIGHT FUNKIN: ARCHIPELAGO", true);
		titleText.scaleX = titleText.scaleY = 0.8;
		titleText.screenCenter(X);
		add(titleText);

		bpmTxt = new FlxText(10, 100, 0, "", 16);
		bpmTxt.scrollFactor.set();
		add(bpmTxt);

		var playButton = new PsychUIButton(0, 0, "Play", onPlay);
		playButton.x = (FlxG.width / 2) - 10 - playButton.width;
		playButton.y = FlxG.height - playButton.height - 10;
		playButton.normalStyle.bgColor = FlxColor.GREEN;
		playButton.normalStyle.textColor = FlxColor.WHITE;
		add(playButton);

		var backButton = new PsychUIButton(0, 0, "Back", onBack);
		backButton.x = (FlxG.width / 2) + 10;
		backButton.y = FlxG.height - backButton.height - 10;
		backButton.normalStyle.bgColor = FlxColor.RED;
		add(backButton);

		var hostLabel = new FlxText(FlxG.width / 2 - 100, 80, 0, "Host", 12);
		_hostInput = new PsychUIInputText(FlxG.width / 2, 80, 150, lastGame["server"], 12);
		add(hostLabel);
		add(_hostInput);

		var portLabel = new FlxText(FlxG.width / 2 - 100, 100, 0, "Port", 12);
		_portInput = new PsychUIInputText(FlxG.width / 2, 100, 150, lastGame["port"], 12);
		_portInput.filterMode = 2;
		_portInput.maxLength = 6;
		add(portLabel);
		add(_portInput);

		var slotLabel = new FlxText(FlxG.width / 2 - 100, 120, 0, "Slot name", 12);
		_slotInput = new PsychUIInputText(FlxG.width / 2, 120, 150, lastGame["slot"], 12);
		add(slotLabel);
		add(_slotInput);

		var pwLabel = new FlxText(FlxG.width / 2 - 100, 140, 0, "Password", 12);
		_pwInput = new PsychUIInputText(FlxG.width / 2, 140, 150, "", 12);
		_pwInput.passwordMask = true;
		add(pwLabel);
		add(_pwInput);

		_tabOrder = [_hostInput, _portInput, _slotInput, _pwInput];

		super.create();

		#if sys
		var apWorldButtonText = FileSystem.exists("C:/ProgramData/Archipelago/custom_worlds/fridaynightfunkin.apworld") ? "Update APWorld" : "Install APWorld";
		var apWorldButton = new PsychUIButton(0, 0, apWorldButtonText, installAPWorld);
		apWorldButton.x = (FlxG.width / 2) - 10 - apWorldButton.width;
		apWorldButton.y = FlxG.height - apWorldButton.height - 50;
		add(apWorldButton);
		#end

		var outputAPWorldButton = new PsychUIButton(0, 0, "Output APWorld", outputAPWorld);
		outputAPWorldButton.x = (FlxG.width / 2) + 10;
		outputAPWorldButton.y = FlxG.height - outputAPWorldButton.height - 50;
		outputAPWorldButton.normalStyle.bgColor = FlxColor.GREEN;
		outputAPWorldButton.normalStyle.textColor = FlxColor.WHITE;
		add(outputAPWorldButton);

		var yamlGen = new PsychUIButton(0, 0, "Generate YAML", doYaml);
		yamlGen.x = (FlxG.width / 2) + 10 + yamlGen.width;
		yamlGen.y = backButton.y;
		yamlGen.normalStyle.bgColor = FlxColor.YELLOW;
		yamlGen.normalStyle.textColor = FlxColor.BLACK;
		add(yamlGen);

		var yamlImport = new PsychUIButton(0, 0, "Import YAML", function()
		{
			if(!fileDialog.completed) return;
			lowFilterAmount = 0.0134;
			fileDialog.load('', [new FileFilter('YAML', 'yaml')], function()
			{
				FlxTween.num(0.0134, 1, 1, {ease: FlxEase.sineInOut}, function(t) {
					APEntryState.lowFilterAmount = t;
				});
				try
				{
					var filePath:String = fileDialog.path.replace('\\', '/');
					var loadedFile = Yaml.parse(fileDialog.data, Parser.options().useMaps());
					trace(Yaml.parse(fileDialog.data, Parser.options().useMaps()));
					trace('Name: ' + loadedFile.get('name'));
					gameSettings.name = loadedFile.get('name');
					_slotInput.text = loadedFile.get('name');
					var fnfData = Reflect.getProperty(loadedFile, 'Friday Night Funkin');//loadedFile.get('Friday Night Funkin');
					trace(fnfData);
					gameSettings.FNF.progression_balancing = fnfData.get('progression_balancing');
					gameSettings.FNF.accessibility = fnfData.get('accessibility');
					gameSettings.FNF.mods_enabled = stringToBool(fnfData.get('mods_enabled'));
					gameSettings.FNF.deathlink = stringToBool(fnfData.get('deathlink'));
					gameSettings.FNF.unlock_type = fnfData.get('unlock_type');
					gameSettings.FNF.unlock_method = fnfData.get('unlock_method');
					gameSettings.FNF.ticket_percentage = Std.parseInt(fnfData.get('ticket_percentage'));
					gameSettings.FNF.ticket_win_percentage = Std.parseInt(fnfData.get('ticket_win_percentage'));
					gameSettings.FNF.chart_modifier_change_chance = Std.parseInt(fnfData.get('chart_modifier_change_chance'));
					gameSettings.FNF.trapAmount = Std.parseInt(fnfData.get('trapAmount'));
					gameSettings.FNF.bbcWeight = Std.parseInt(fnfData.get('bbcWeight'));
					gameSettings.FNF.ghostChatWeight = Std.parseInt(fnfData.get('ghostChatWeight'));
					gameSettings.FNF.svcWeight = Std.parseInt(fnfData.get('svcWeight'));
					gameSettings.FNF.tutorialWeight = Std.parseInt(fnfData.get('tutorialWeight'));
					gameSettings.FNF.fakeTransWeight = Std.parseInt(fnfData.get('fakeTransWeight'));
					gameSettings.FNF.shieldWeight = Std.parseInt(fnfData.get('shieldWeight'));
					gameSettings.FNF.MHPWeight = Std.parseInt(fnfData.get('MHPWeight'));
				}
				catch(e:Exception)
				{
					trace(e.stack);
				}
			});
		});
		yamlImport.x = (FlxG.width / 2) + 10 + yamlImport.width;
		yamlImport.y = yamlGen.y - 50;
		yamlImport.normalStyle.bgColor = FlxColor.YELLOW;
		yamlImport.normalStyle.textColor = FlxColor.BLACK;
		add(yamlImport);
	}

	
	function stringToBool(value:Dynamic):Bool
	{
		if (Std.isOfType(value, String)) {
			if (value.trim().toLowerCase() == 'true')
				return true;
			else
				return false;
		}

		return false;
	}

	function doYaml() 
	{
		openSubState(new APSettingsSubState());
	}

    var daReason:String = "man idk";
    function errDesc(a:String) {
        switch (a)
        {
            case 'noHost':
                daReason = "Host name cannot be empty. (That's the address of the server you're connecting to.)";

            case 'noPort':
                daReason = "Port number cannot be empty. (That's the 4-5 digits at the end of the server address, often 38281.)";

            case 'portNonNumeric':
                daReason = "Port must be numeric.";

            case 'portOutOfRange':
                daReason = "Port should be a number from 1 to 65535 (most likely 38281).";

            case 'noSlot':
                daReason = "Slot name cannot be empty. (That's your name on your YAML configuration file.)";

            case 'InvalidSlot':
                daReason = "That player isn't listed for this server instance.";

            case 'InvalidGame':
                daReason = "That Player isn't listed as a Friday Night Funkin slot.";

            case 'IncompatibleVersion':
                daReason = "The server is expecting a newer version of the game. Please ensure you're running the latest version.";

            case 'InvalidPassword':
                daReason = "The password supplied is incorrect.";

            case 'InvalidItemsHandling':
                daReason = "Please report a bug stating that an \"InvalidItemsHandling\" error was received.";

            case 'connectionReset':
                daReason = "The server closed the connection.";

            case 'badHostFormat':
                daReason = "Please check the value entered as Host. The format is invalid.";

            case 'unknownHost':
                daReason = "No server was found at \""+_hostInput.text+"\".";

            case 'default':
                daReason = "Slot name cannot be empty. (That's your name on your YAML configuration file.)";
        }
        return daReason;
    }

	function onRoomInfo():Void {
		trace("Got room info - sending connect packet");

		#if debug
		var tags = ["AP", "Testing"];
		#else
		var tags = ["AP", "Testing"];
		#end
		ap.ConnectSlot(_slotInput.text, _pwInput.text.length > 0 ? _pwInput.text : null, 0x7, tags, {major: 0, minor: 5, build: 0});
	}

	function onSlotRefused(errors:Array<String>):Void {
		inArchipelagoMode = false;
		trace("Slot refused", errors);
		closeSubState();
		switch (errors[0])
		{
			case x = "InvalidSlot" | "InvalidGame": postError(x, ["name" => _slotInput.text]);
			case x = "IncompatibleVersion" | "InvalidPassword" | "InvalidItemsHandling": postError(x);
			case x: postError("default", ["error" => x]);
		}
	}

	function onSocketDisconnected():Void
	{
		inArchipelagoMode = false;
		polltimer.stop();
		trace("Disconnected");
		closeSubState();
		postError("connectionReset");
	}

	function onSlotConnected(slotData:Dynamic):Void
	{
		trace("Connected - switching to game state");
		polltimer.stop();
		ap.onRoomInfo.remove(onRoomInfo);
		ap.onSlotRefused.remove(onSlotRefused);
		ap.onSocketDisconnected.remove(onSocketDisconnected);
		ap.onSlotConnected.remove(onSlotConnected);
		deathLink = slotData.deathlink == 0 ? false : true;
		victorySong = slotData.victoryLocation;
		fullSongCount = slotData.fullSongCount;
		closeSubState();
		inArchipelagoMode = true;
		var FNF = new FlxSave();
		FNF.bind("FNF");
		FNF.data.lastGame = {
			server: _hostInput.text,
			port: _portInput.text,
			slot: _slotInput.text
		};
		FNF.data.gameSettings = gameSettings;
		FNF.close();
		//APGameState
		//FlxG.switchState(new APGameState(ap, slotData));
		apGame = new APGameState(ap, slotData);
		if (deathLink)
            apGame.info().add_tag("DeathLink");

		// if (ClientPrefs.data.deathlink)
		apGame.info().toggleDeathLink(deathLink);

		runArch();
	}

	public static function installAPWorld():Void
	{
		#if sys
		var programDataPath = null;
		for (drive in FileSystem.readDirectory("C:/"))
		{
			var potentialPath = drive + "ProgramData/Archipelago/";
			trace("Checking for Archipelago directory at " + potentialPath);
			if (FileSystem.exists(potentialPath))
			{
				programDataPath = potentialPath;
				break;
			}
		}
		if (programDataPath == null)
		{
			trace("Archipelago directory not found on any drive.");
			return;
		}
		var launcherPath = programDataPath + "ArchipelagoLauncher.exe";
		var customWorldsPath = programDataPath + "custom_worlds/";
		var apWorldFile = customWorldsPath + "fridaynightfunkin.apworld";

		if (FileSystem.exists(launcherPath))
		{
			trace("ArchipelagoLauncher found. Installing or updating .apworld file.");
			// Create a temp file to run with the system.
			var apworld = haxe.Resource.getBytes("apworld");
			File.saveBytes("fridaynightfunkin.apworld", apworld);
			Sys.command("cmd /c start fridaynightfunkin.apworld");

			new FlxTimer().start(5, function(the)
			{
				while (true)
				{
					try
					{
						FileSystem.deleteFile("fridaynightfunkin.apworld");
						trace("APWorld installed successfully.");
						break;
					}
					catch (e:Dynamic)
					{
						// trace("Failed to delete file, retrying...");
					}
				}
			});
			// FileSystem.deleteFile("fridaynightfunkin.apworld");
		}
		else
		{
			trace("Archipelago was not found. Please install Archipelago to install the .apworld file.");
		}
		#end
	}

	public static function outputAPWorld():Void
	{
		#if sys
		// var programDataPath = "C:/ProgramData/Archipelago/";
		// var customWorldsPath = programDataPath + "custom_worlds/";
		// var apWorldFile = customWorldsPath + "fridaynightfunkin.apworld";

		trace("Outputting .apworld file.");
		var apworld = haxe.Resource.getBytes("apworld");
		File.saveBytes("fridaynightfunkin.apworld", apworld);
		trace("APWorld output success!");
		#end
	}
	

	inline function postError(str:String, ?vars:Map<String, Dynamic>)
		openSubState(new Prompt("Error: " + errDesc(str), 0, null, null, false));

	var cancelButton:PsychUIButton;
	var polltimer = new Timer(50);
	function onPlay()
	{

		var port = Std.parseInt(_portInput.text);
		if (_hostInput.text == "")
			postError('noHost');
		else if (_portInput.text == "")
			postError('noPort');
		else if (!~/^\d+$/.match(_portInput.text))
			postError('portNonNumeric');
		else if (port <= 0 || port > 65535)
			postError('portOutOfRange');
		else if (_slotInput.text == "")
			postError('noSlot');
		else
		{
			FlxG.autoPause = false;
			var connectSubState = new APConnectingSubState();
			var uri = '${_hostInput.text}:${_portInput.text}';
			if (!wsCheck.match(uri))
				uri = 'ws://$uri';

			//openSubState(connectSubState);
			connectSubState.closeCallback = () ->
			{
				FlxG.autoPause = true;
			};

			ap = new Client('FNF-${_slotInput.text}', "Friday Night Funkin", uri);

			ap.onRoomInfo.add(onRoomInfo);
			ap.onSlotRefused.add(onSlotRefused);
			polltimer.run = ap.poll;
			ap.onSocketDisconnected.add(onSocketDisconnected);
			ap.onSlotConnected.add(onSlotConnected);

			var connectingText = new FlxText(0, 0, 0, "Connecting...", 20);
			connectingText.color = FlxColor.WHITE;

			cancelButton = new PsychUIButton(0, 0, "Cancel", () ->
			{
				inArchipelagoMode = false;
				polltimer.stop();
				ap.disconnect_socket();
				remove(connectingText);
				remove(cancelButton);
			});

			for (item in [connectingText, cancelButton])
				item.screenCenter(XY);

			cancelButton.y = connectingText.y + connectingText.height + 5;

			for (item in [connectingText, cancelButton])
			{
				item.x = Math.round(item.x);
				item.y = Math.round(item.y);
				add(item);
			}

			connectSubState.onCancel.add(() ->
			{
				inArchipelagoMode = false;
				polltimer.stop();
				ap.disconnect_socket();
			});
		}
	}

	function onBack()
	{
		FlxG.switchState(new states.MainMenuState());
	}

	function runArch():Void // Soon
	{
		inArchipelagoMode = true;
		WeekData.reloadWeekFiles(false);
		FlxG.save.data.closeDuringOverRide = false;
		FlxG.save.data.manualOverride = false;
		FlxG.save.data.storyWeek = null;
		FlxG.save.data.currentModDirectory = null;
		FlxG.save.data.difficulties = null; // just in case
		FlxG.save.data.SONG = null;
		FlxG.save.data.storyDifficulty = null;
		FlxG.save.data.songPos = null;
		FlxG.save.flush();
		FlxG.switchState(new archipelago.APCategoryState(apGame, ap));
	}

	var e:Int = 0;
	override function update(elapsed:Float)
	{
		//this is the stupidest way to fix elapsed being weird
		e++;
		titleText.color = FlxColor.fromHSL(((e / 2) / 300 * 360) % 360, 1.0, 0.5*1.0);
		//if (FlxG.keys.justPressed.HOME) runArch(); debug that is no longer needed
		if(swagShader != null) swagShader.hue += 0.45 / (ClientPrefs.data.framerate / 60);
		if (!ClientPrefs.data.lowQuality)
		{
			checker.x -= 0.45 / (ClientPrefs.data.framerate / 60);
			checker.y -= 0.16 / (ClientPrefs.data.framerate / 60);
		}
		super.update(elapsed);
		yamlName = _slotInput.text;
		if(FlxG.sound.music != null && FlxG.sound.music.playing)
		{
			@:privateAccess
			{
				var af = lime.media.openal.AL.createFilter(); // create AudioFilter
				lime.media.openal.AL.filteri( af, lime.media.openal.AL.FILTER_TYPE, lime.media.openal.AL.FILTER_LOWPASS ); // set filter type
				lime.media.openal.AL.filterf( af, lime.media.openal.AL.LOWPASS_GAIN, 1 ); // set gain
				lime.media.openal.AL.filterf( af, lime.media.openal.AL.LOWPASS_GAINHF, lowFilterAmount ); // set gainhf
				lime.media.openal.AL.sourcei( FlxG.sound.music._channel.__audioSource.__backend.handle, lime.media.openal.AL.DIRECT_FILTER, af ); // apply filter to source (handle)
				//lime.media.openal.AL.sourcef(FlxG.sound.music._channel.__audioSource.__backend.handle, lime.media.openal.AL.HIGHPASS_GAIN, 0);
			}
		}

		
		try {
			bpmTxt.text = 
				"Progression Balancing: "
				+ gameSettings.FNF.progression_balancing
				+ "\nAccessibility: "
				+ gameSettings.FNF.accessibility
				+ "\nMods Enabled: "
				+ gameSettings.FNF.mods_enabled
				+ "\nDeathlink: "
				+ gameSettings.FNF.deathlink
				+ "\nUnlock Type: "
				+ gameSettings.FNF.unlock_type
				+ "\nUnlock Method: "
				+ gameSettings.FNF.unlock_method
				+ "\nTicket Percentage: "
				+ gameSettings.FNF.ticket_percentage
				+ "\nTicket Win Percentage: "
				+ gameSettings.FNF.ticket_win_percentage
				+ "\nChart Modifier Change Chance: "
				+ gameSettings.FNF.chart_modifier_change_chance
				+ "\nTrap Amount: "
				+ gameSettings.FNF.trapAmount
				+ "\nBlue Balls Curse Weight: "
				+ gameSettings.FNF.bbcWeight
				+ "\nGhost Chat Weight: "
				+ gameSettings.FNF.ghostChatWeight
				+ "\nStreamer Vs. Chat Weight: "
				+ gameSettings.FNF.svcWeight
				+ "\nTutorial Weight: "
				+ gameSettings.FNF.tutorialWeight
				+ "\nFake Transition Weight: "
				+ gameSettings.FNF.fakeTransWeight
				+ "\nShield Weight: "
				+ gameSettings.FNF.shieldWeight
				+ "\nMax HP Weight: "
				+ gameSettings.FNF.MHPWeight;
		} catch (e:Dynamic) {
			trace("Error updating bpmTxt: " + e);
		}
}

}